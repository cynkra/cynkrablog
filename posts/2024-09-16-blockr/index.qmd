---
layout: post
title: "Introducing blockr: a no-code dashboard builder for R"
image: logo.png
author: David Granjon
date: '2024-09-16'
categories:
  - R
format: 
  html:
    code-fold: 'show'
filters:
  - shinylive
---

![](https://avatars.githubusercontent.com/u/145758851?s=400&u=1545a34095e8e84f5cb2b292b1e900df59ba7239&v=4){width=25% fig-align="center"}

Since 2023, [BristolMyersSquibb](https://www.bms.com/), the Y [company](https://the-y-company.com/) and [cynkra](cynkra.com) have teamed up to develop a novel __no-code__ solution for R.

```{r, setup}
library(blockr)
library(pracma)
```

## Introduction

blockr is an R package designed to democratize __data analysis__ by providing a __flexible__, __intuitive__, and __code-free__ approach to building data pipelines. It has 2 main user targets:

1. On the one hand, it empowers __non technical__ users to create insightful data workflows using __pre-built__ blocks that can be easily connected, all without writing a single line of code.
2. On the other hand, it provides developers with a set of tools to seamlessly create new blocks, thereby enhancing the entire framework and fostering __collaboration__ within organizations teams.

blockr is data __agnostic__, meaning it can work with any kind of dataset, that is pharmaceutical data or sport analytics data. It builds on top of [shiny](https://shiny.posit.co/) to ensure real time feedback to any data change. Finally, it allows to export code to create __reproducible__ data analysis.


## Getting started

### As a simple user

As a simple user, you're not expected to write any single line of code to use blockr. You can use the below kitchen sink to get started. This example is based on the palmer penguins data and running a single stack with 3 blocks: the first block to select the data, another one to create the plot and then add the points to it.

blockr has a its own __validation__ system. For instance, using the below example, you can try to press return on the first block select box (penguins is the selected default). You'll notice an immediate feedback message. A global message is displayed in the block upper middle part: "1 error(s) found in this block". You get more detailed mesages next to the faulty input(s): "selected value(s) not among provided choices". You can repeat the same experience with the last plot layer block, by emptying the color and shape select inputs. Error messages can accumulate.

You can dynamically add blocks to a current __stack__, that gathers a set of related blocks. You can think a stack as a data analysis __recipe__ as in cooking, where blocks are instructions. To add a new block, you can click on the `+` icon on the stack top right corner. This opens a sidebar on the left side, where one may search for blocks that are compatible with the current state of the pipeline. With an empty stack, only entry point blocks are suggested, so you can import data. Then, after clicking on the block, the suggestion list changes so you can, for instance, filter data or select only a subset of columns, and much more.

```{shinylive-r}
#| standalone: true
#| components: [viewer]
#| column: screen-inset-shaded
#| viewerHeight: 800
webr::install("blockr", repos = "https://bristolmyerssquibb.github.io/webr-repos/")

library(blockr)
library(palmerpenguins)
library(ggplot2)

new_ggplot_block <- function(col_x = character(), col_y = character(), ...) {

  data_cols <- function(data) colnames(data)

  new_block(
    fields = list(
      x = new_select_field(col_x, data_cols, type = "name"),
      y = new_select_field(col_y, data_cols, type = "name")
    ),
    expr = quote(
      ggplot(mapping = aes(x = .(x), y = .(y)))
    ),
    class = c("ggplot_block", "plot_block"),
    ...
  )
}

new_geompoint_block <- function(color = character(), shape = character(), ...) {

  data_cols <- function(data) colnames(data$data)

  new_block(
    fields = list(
      color = new_select_field(color, data_cols, type = "name"),
      shape = new_select_field(shape, data_cols, type = "name")
    ),
    expr = quote(
      geom_point(aes(color = .(color), shape = .(shape)), size = 2)
    ),
    class = c("geompoint_block", "plot_layer_block", "plot_block"),
    ...
  )
}

stack <- new_stack(
  data_block = new_dataset_block("penguins", "palmerpenguins"),
  plot_block = new_ggplot_block("flipper_length_mm", "body_mass_g"),
  layer_block = new_geompoint_block("species", "species")
)
serve_stack(stack)
```

TBD: add workspace example to connect stacks

As an end-user, you are not supposed to write code. As such, if you think anything is missing, you can open an issue [here](https://github.com/BristolMyersSquibb/blockr/issues), or ask any developer you are working with to create new blocks. This leads us to the second part of this blog post ... How to use blockr as a developers?

### As a developer

How to install it:

```r
pak::pak("BristolMyersSquibb/blockr")
```

blockr can't provide any single data manipulation or visualization block. That's the reason why we made it easily __extensible__. You can get an introduction to blockr for developers [here](https://bristolmyerssquibb.github.io/blockr/articles/blockr.html#blockr-for-developers).

In the following, we create an ordinary differential equations solver block using the pracma package. We choose the Lorenz [attractor](https://en.wikipedia.org/wiki/Lorenz_system). With R, equations may be written as:

```r
lorenz <- function(t, y, parms) {
  c(
    X = parms[1] * y[1] + y[2] * y[3],
    Y = parms[2] * (y[2] - y[3]),
    Z = -y[1] * y[2] + parms[3] * y[2] - y[3]
  )
}
```

where `t` is the time, `y` a vector of solutions and `params` the various parameters. If you are familiar with [deSolve](https://cran.r-project.org/web/packages/deSolve/index.html), equations are defined with similar functions. For this blog post, we selected pracma as deSolve does not run in shinylive, so you could not see the embedded demonstration.

### Add interactivity with the __fields__

We want to add interactivity on the 3 different parameters. Hence, we create our new block function with 3 __fields__ inside a list. Since the expected values are numbers, we leverage the `new_numeric_field`. Parameters are only explicitly shown for the first field:

```r
new_ode_block <- function(...) {
  fields <- list(
    a = new_numeric_field(value = -8 / 3, min = -10, max = 20),
    b = new_numeric_field(-10, -50, 100),
    c = new_numeric_field(28, 1, 100)
  )
  # TBD
  # ...
}
```

As you may imagine, these fields are subsequently translated into shiny inputs, that is `numericInput` in our example. If you face a situation where you need to implement a custom field, not included in blockr, you can read this [vignette](https://bristolmyerssquibb.github.io/blockr/articles/new-field.html).


### Create the block expression
As next step, we __instantiate__ our block with the `new_block` blockr __constructor__:

```r
new_block(
  fields = fields,
  expr = quote(<EXPR>),
  ...,
  class = <CLASSES>,
  submit = FALSE
)
```

A block is composed of fields, a quoted __expression__ which involved fields (to delay the evaluation), somes __classes__ which control the block behavior, and extra parameters passed with `...`. Finally, `submit` allows to delay the block evaluation by requiring the user to click on a submit button (FALSE by default). This prevents from triggering unwanted intensive computations.

In our example, the expression calls the `ode45` function. Notice the usage of `substitute` to inject the `lorenz` function within the expression. This is necessary since `lorenz` is defined outside of the expression, and using `quote` would fail. Fields are invoked with `.(field_name)`, a rather strange notation, required by `bquote` to process the expression. It is not mandory to understand this technical underlying detail, but this standard must be respected. You may also notice that some parameters like the initial conditions `y0` or time values are hardcoded. We leave the reader to transform them into fields, as an exercise:

```r
new_block(
  fields = fields,
  expr = substitute(
    as.data.frame(
      ode45(
        fun,
        y0 = c(X = 1, Y = 1, Z = 1),
        t0 = 0,
        tfinal = 100,
        parms = c(.(a), .(b), .(c))
      )
    ),
    list(fun = lorenz)
  )
  # TBD
)
```

### Add the right classes

We give our block 2 classes, namely `ode_block` and `data_block`:

```{r}
new_ode_block <- function(...) {
  fields <- list(
    a = new_numeric_field(-8 / 3, -10, 20),
    b = new_numeric_field(-10, -50, 100),
    c = new_numeric_field(28, 1, 100)
  )

  new_block(
    fields = fields,
    expr = substitute(
      as.data.frame(
        ode45(
          fun,
          y0 = c(X = 1, Y = 1, Z = 1),
          t0 = 0,
          tfinal = 100,
          parms = c(.(a), .(b), .(c))
        )
      ),
      list(fun = lorenz)
    ),
    ...,
    class = c("ode_block", "data_block")
  )
}
```

As explained earlier, they are required to control the block behavior, as blockr is build with [S3](https://adv-r.hadley.nz/s3.html). For instance, `data_block` have a specific __evaluation__ method, to calculate the expression:

```r
evaluate_block.data_block <- function (x, ...) 
{
  stopifnot(...length() == 0L)
  eval(generate_code(x), new.env())
}
```

where `generate_code` processes the block code. __Data__ blocks are considered as entry point blocks, as opposed to __transformation__ blocks, that operate on data. Therefore, you may easily understand that the evaluation method for a transform block requires to pass the data from the previous block with `%>%`:

```r
evaluate_block.block <- function (x, data, ...) 
{
  stopifnot(...length() == 0L)
  eval(substitute(data %>% expr, list(expr = generate_code(x))), list(data = data))
}
```

If you want to build a plot block and plot layers blocks, you would have to design a specific evaluate method, that accounts for the `+` operator required by ggplot2. To learn more about how to create a plot block, you can read this [article](https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html).

### Demo

```{shinylive-r}
#| standalone: true
#| components: [viewer, editor]
#| column: screen-inset-shaded
#| viewerHeight: 800
webr::install("blockr", repos = c("https://bristolmyerssquibb.github.io/webr-repos", "https://repo.r-wasm.org"))
webr::install("blockr.ggplot2", repos = c("https://bristolmyerssquibb.github.io/webr-repos", "https://repo.r-wasm.org"))

library(blockr)
library(pracma)
library(blockr.ggplot2)

lorenz <- function(t, y, parms) {
  c(
    X = parms[1] * y[1] + y[2] * y[3],
    Y = parms[2] * (y[2] - y[3]),
    Z = -y[1] * y[2] + parms[3] * y[2] - y[3]
  )
}

new_ode_block <- function(...) {
  fields <- list(
    a = new_numeric_field(-8 / 3, -10, 20),
    b = new_numeric_field(-10, -50, 100),
    c = new_numeric_field(28, 1, 100)
  )

  new_block(
    fields = fields,
    expr = substitute(
      as.data.frame(
        ode45(
          fun,
          y0 = c(X = 1, Y = 1, Z = 1),
          t0 = 0,
          tfinal = 100,
          parms = c(.(a), .(b), .(c))
        )
      ),
      list(fun = lorenz)
    ),
    ...,
    class = c("ode_block", "data_block")
  )
}

stack <- new_stack(
  new_ode_block,
  new_ggplot_block(
    func = c("x", "y"),
    default_columns = c("y.1", "y.2")
  ),
  new_geompoint_block
)
serve_stack(stack)
```

### Packaging new blocks: the registry

In the above example, we define the block on the fly. However, an other outstanding feature of blockr is the __registry__, which you can see as a blocks __supermarket__. From the R side, the registry is an __environment__ that can be extended by developers who bring their own blocks packages:

```{mermaid}
%%| mermaid-format: svg
%%| mermaid-theme: default
flowchart LR
  subgraph blockr_custom[your_block_package]
    new_block1[New block 1]
    new_block2[New block 2]
  end
  blockr_custom--> |register| registry
  subgraph registry[Registry]
    subgraph select_reg[Select block]
      reg_name[Name: select block]
      reg_descr[Description: select columns in a table]
      reg_classes[Classes: select_block, tranform_block]
      reg_input[Input: data.frame]
      reg_output[Output: data.frame]
      reg_package[Package: blockr]
    end
    subgraph filter_reg[Filter block]
    end
    filter_reg --x |unregister| trash['fa:fa-trash']
  end
```

To get an overview of all available blocks within the blockr core package, we call `get_registry`:

```{r}
get_registry()
```

This function returns a dataframe containing information about blocks such as their constructors, like `new_ode_block`, the description, the category (data, transform, plot ... this is user defined), classes, accepted input, returned output and package.

To register a block we call `register_block` (or `register_blocks` for multiple blocks):

```{r}
register_my_blocks <- function() {
  register_block(
    constructor = new_ode_block,
    name = "ode block",
    description = "Computed the Lorent attractor solutions",
    classes = c("ode_block", "data_block"),
    input = NA_character_,
    output = "data.frame",
    package = "<YOUR_PACKAGE>",
    category = "data"
  )
  # You can register any other blocks here ...
}
```

where `<YOUR_PACKAGE>` must be replaced by your real package name.

Within a `zzz.R` script, you can ensure to register any block when the package loads with a __hook__:

```r
.onLoad <- function(libname, pkgname) {
  register_my_blocks()
  invisible(NULL)
}
```

After the registration, you can check whether the registry is updated, by looking at the ode block:

```{r}
register_my_blocks()
reg <- get_registry()
reg[reg$package == "<YOUR_PACKAGE>", ]
```
