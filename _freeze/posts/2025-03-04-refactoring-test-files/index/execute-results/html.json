{
  "hash": "e789a3eeb337dfc58740c498a1978e8a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2025-03-04\nlayout: post\nimage: pexels-pixabay-163064.jpg\nauthor: David Schoch\ntitle: 'Organizing tests in R packages'\ncategories:\n- R\n- test\n---\n\n\n\n\nA small team at cynkra is working on the R package [igraph](https://r.igraph.org/), a popular package for simple graphs and network analysis.\nA big part of this work involves refactoring legacy code and enhancing the maintainability of the package for the future.\nOne such task was to reorganize and refactor the tests of the package.\n\n## Organizing R files\n\nBefore talking about the organization of test files, let us briefly talk about how to organize R scripts that contain the functions within an R package under `R/`.\nShould each function be in its own file?\nSo should\n\n```r\nmy_mult <- function(a,b){\n  a * b\n}\n\nmy_sum <- function(a,b){\n  a + b\n}\n\nmy_hello <- function(name){\n  glue::glue(\"Hello {name}!\")\n}\n\nmy_bye <- function(name){\n  glue::glue(\"Goodbye {name}!\")\n}\n```\n\nlive in `R/my_mult.R`, `R/my_sum`, `R/my_hello.R`, and `R/my_bye.R`?\nOr should the all live together in one file `R/my-functions.R`?\nYou might guess that neither approach is optimal, especially when a package contains many functions.\nEither you have dozens (or hundreds!)of files under`R/`our you have one large script with thousands of lines of codes.\nWhile there is no real best practice, both of these extremes should generally be avoided.\nThe best approach usually is to try to organize your functions in*modules* of related functions.\n\nIn `igraph`, files are organized according to graph theoretic tasks.\nSo for example`R/centrality.R` contains all functions that compute importance of nodes in networks or `R/community.R` contains all functions to cluster a network.\n\nIn similar spirit we would organize our functions above in two files. `my_mult()` and `my_sum()` would go into something like `R/my_operators.R` and `my_hello()` and `my_bye()` into `R/my_greetings.R`.\n\nFor more details on organizing your files in an R package see the book [R Packages (2e)](https://r-pkgs.org/code.html#sec-code-organising).\nThere is also a lot of useful tips for how to navigate your files and how to find specific functions more efficiently than scrolling around.\n\n## Organizing test files\n\nEqually important, but probably less often considered, is the way test files should be organized (the files `test/testthat/test-*.R`).\nThe simplest and best way is to follow the guidance from the section above and modularize the tests.\nIn the case of tests, you actually do not have to do anything new, simply use the same modularization as for the R script files.\nSo if there is a file `R/my_operators.R`, there should be a `tests/testthat/test-my_operators.R`.\n\nIn your own packages, you can easily achieve this type from the start by using\n\n```r\nusethis::use_test()\n```\n\nAs the help states:\n\n> [...] makes it easy to create paired R and test files, using the convention that **the tests for R/foofy.R should live in tests/testthat/test-foofy.R**.\n\nSo you do not need to worry about naming your test files correctly if you call this function while you have the R file `R/foofy.R` open because it is automatically created for you.\nBesides convenience, this also has very practical benefits, which are described in the book [R packages (2e)](https://r-pkgs.org/testing-basics.html#create-a-test). \nFor example, it is easier to jump from one file to the other using `use_test()` and `use_r()`.\n\n## Cleanup of igraph test files\n\nOne goal of our refactoring efforts in `igraph`was to achieve a one-to-one correspondence between R files (there exist around 90 R script files) and test files.\nThe way igraph grew over the years, there were many things to fix in the organization of the test files.\nSome files only tested singular functions, and some contained a mix of functions from different R scripts.\nThe function below is used to check how off the mapping is by trying to match test files to R script files.\nYou simply need to provide a CRAN (GitHub) archive link and the function computes the number of test files that do not have a corresponding R script.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_test_mapping <- function(url) {\n  temp_file <- tempfile(fileext = \".tar.gz\")\n  temp_dir <- tempfile()\n  dir.create(temp_dir)\n  download.file(url, temp_file, mode = \"wb\")\n\n  untar(temp_file, exdir = temp_dir)\n  pkg_dir <- list.dirs(temp_dir, recursive = FALSE)[1]\n\n  r_files <- list.files(\n    file.path(pkg_dir, \"R\"),\n    recursive = TRUE,\n    full.names = FALSE\n  )\n\n  test_files <- list.files(\n    file.path(pkg_dir, \"tests/testthat\"),\n    pattern = \"test-\",\n    recursive = FALSE,\n    full.names = FALSE\n  )\n\n  unlink(temp_file)\n  unlink(temp_dir)\n  tested_r_files <- test_files |> stringr::str_remove(\"^test-\")\n  length(test_files[!tested_r_files %in% r_files])\n}\n```\n:::\n\n\n\n\nVersion 1.6.0 of igraph roughly corresponds to when cynkra started to work on igraph.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://cran.r-project.org/src/contrib/Archive/igraph/igraph_1.6.0.tar.gz\"\ncheck_test_mapping(url)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 144\n```\n\n\n:::\n:::\n\n\n\n\nThis version contains 144 test files which do not have a corresponding R script!\nNow compare this with the main branch in late February 2025 of the GitHub repository.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://github.com/igraph/rigraph/archive/0bac719e44c18024080163f52fbce373ebd2c26b.tar.gz\"\ncheck_test_mapping(url)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nðŸ¥³\n\n## Conclusion\n\nTest file refactoring does not rank high on the list of exciting things to do while maintaining an R package.\nMost users will never see the result of this effort and it does not directly impact the usability of the package.\nHowever, from a developers perspective, this was a very important step to ensure long-term maintainability of the package since it introduces a clear modular test structure for the package that is easier to comprehend.\nThis means less of a barrier to add and work on new tests; and importantly means less of a barrier for newcomers to contribute.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}