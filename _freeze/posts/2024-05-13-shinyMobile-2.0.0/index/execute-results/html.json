{
  "hash": "7f126e5ffeb500e77b528e666e4fbd0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\nlayout: post\ntitle: \"shinyMobile 2.0.0: a preview\"\nimage: logo.png\nauthor: David Granjon\ndate: '2024-05-13'\ncategories:\n  - shiny\nformat: \n  html:\n    code-fold: true\n---\n\n\nshinyMobile has been around for about 5 years now. It allows to develop outstanding Shiny apps for iOS and Android, owing to the awesome open source Framework7 [template](https://framework7.io/) which powers it.\n\nGuess what? This year shinyMobile gets a major update to v2.2.0. I'd like to warmly thank [Veerle van Leemput](https://hypebright.nl/) and Michael S. Czahor from [AthlyticZ](https://linktr.ee/athlyticz) for providing significant support during this marathon.\n\n# What's new\n\nshinyMobile 1.0.0 and above were running Framework5 v5, a rather ancient version. With the new Framework7 v8, you might expect a significant number of changes (TO DO link), but for the best!\n\n## Major changes\n\n### New multi pages experimental support\n\nWe are very excited to bring this feature out for this new release. Under the hood, this is possible owing to the `{brochure}` [package](https://github.com/ColinFay/brochure) from \n[Colin Fay](https://github.com/ColinFay) as well as the internal Framework7 [router](https://framework7.io/docs/view) component.\n\n#### What does this mean? \n\nYou can now develop __real multi pages__ Shiny applications and have different url endpoints and redirections. For instance, `https://my-app/home` can be the home page while `https://my-app/settings` brings to the settings page.\n\n#### How does this work?\n\nAt the time of writting of this blog post, you must install a patched `{brochure}` version with `devtools::install_github(\"DivadNojnarg/brochure\")`.\n\nIn the below code, we basically have 3 pages having their own content and a common layout for consistency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n# Needs a specific version of brochure for now.\n# This allows to pass wrapper functions with options\n# as list. We need it because of the f7Page options parameter\n# and to pass the routes list object for JS.\n# devtools::install_github(\"DivadNojnarg/brochure\")\nlibrary(brochure)\nlibrary(shinyMobile)\n\n# Allows to use the app on a server like \n# shinyapps.io where basepath is /app_name\n# instead of \"/\" or \"\".\nmake_link <- function(path = NULL, basepath = \"\") {\n  if (is.null(path)) {\n    if (nchar(basepath) > 0) {\n      return(basepath)\n    } else {\n      return(\"/\")\n    }\n  }\n  sprintf(\"%s/%s\", basepath, path)\n}\n\nlinks <- lapply(2:3, function(i) {\n  tags$li(\n    f7Link(\n      routable = TRUE,\n      label = sprintf(\"Link to page %s\", i),\n      href = make_link(i)\n    )\n  )\n})\n\npage_1 <- function() {\n  page(\n    href = \"/\",\n    ui = function(request) {\n      shiny::tags$div(\n        class = \"page\",\n        # top navbar goes here\n        f7Navbar(title = \"Home page\"),\n        # NOTE: when the main toolbar is enabled in\n        # f7MultiLayout, we can't use individual page toolbars.\n        # f7Toolbar(\n        #  position = \"bottom\",\n        #  tags$a(\n        #    href = \"/2\",\n        #    \"Second page\",\n        #    class = \"link\"\n        #  )\n        # ),\n        # Page content\n        tags$div(\n          class = \"page-content\",\n          f7List(\n            inset = TRUE,\n            strong = TRUE,\n            outline = TRUE,\n            dividers = TRUE,\n            mode = \"links\",\n            links\n          ),\n          f7Block(\n            f7Text(\"text\", \"Text input\", \"default\"),\n            f7Select(\"select\", \"Select\", colnames(mtcars)),\n            textOutput(\"res\"),\n            textOutput(\"res2\")\n          )\n        )\n      )\n    }\n  )\n}\n\npage_2 <- function() {\n  page(\n    href = \"/2\",\n    ui = function(request) {\n      shiny::tags$div(\n        class = \"page\",\n        # top navbar goes here\n        f7Navbar(\n          title = \"Second page\",\n          # Allows to go back to main\n          leftPanel = tagList(\n            tags$a(\n              href = make_link(),\n              class = \"link back\",\n              tags$i(class = \"icon icon-back\"),\n              tags$span(\n                class = \"if-not-md\",\n                \"Back\"\n              )\n            )\n          )\n        ),\n        shiny::tags$div(\n          class = \"page-content\",\n          f7Block(f7Button(inputId = \"update\", label = \"Update stepper\")),\n          f7List(\n            strong = TRUE,\n            inset = TRUE,\n            outline = FALSE,\n            f7Stepper(\n              inputId = \"stepper\",\n              label = \"My stepper\",\n              min = 0,\n              max = 10,\n              size = \"small\",\n              value = 4,\n              wraps = TRUE,\n              autorepeat = TRUE,\n              rounded = FALSE,\n              raised = FALSE,\n              manual = FALSE\n            )\n          ),\n          f7Block(textOutput(\"test\"))\n        )\n      )\n    }\n  )\n}\n\npage_3 <- function() {\n  page(\n    href = \"/3\",\n    ui = function(request) {\n      shiny::tags$div(\n        class = \"page\",\n        # top navbar goes here\n        f7Navbar(\n          title = \"Third page\",\n          # Allows to go back to main\n          leftPanel = tagList(\n            tags$a(\n              href = make_link(),\n              class = \"link back\",\n              tags$i(class = \"icon icon-back\"),\n              tags$span(\n                class = \"if-not-md\",\n                \"Back\"\n              )\n            )\n          )\n        ),\n        shiny::tags$div(\n          class = \"page-content\",\n          f7Block(\"Nothing to show yet ...\")\n        )\n      )\n    }\n  )\n}\n\nbrochureApp(\n  basepath = make_link(),\n  # Pages\n  page_1(),\n  page_2(),\n  page_3(),\n  # Important: in theory brochure makes\n  # each page having its own shiny session/ server function.\n  # That's not what we want here so we'll have\n  # a global server function.\n  server = function(input, output, session) {\n    output$res <- renderText(input$text)\n    output$res2 <- renderText(input$select)\n    output$test <- renderText(input$stepper)\n\n    observeEvent(input$update, {\n      updateF7Stepper(\n        inputId = \"stepper\",\n        value = 0.1,\n        step = 0.01,\n        size = \"large\",\n        min = 0,\n        max = 1,\n        wraps = FALSE,\n        autorepeat = FALSE,\n        rounded = TRUE,\n        raised = TRUE,\n        color = \"pink\",\n        manual = TRUE,\n        decimalPoint = 2\n      )\n    })\n  },\n  wrapped = f7MultiLayout,\n  wrapped_options = list(\n    basepath = make_link(),\n    # Common toolbar\n    toolbar = f7Toolbar(\n      f7Link(icon = f7Icon(\"house\"), href = make_link(), routable = TRUE)\n    ),\n    options = list(\n      dark = TRUE,\n      theme = \"md\",\n      routes = list(\n        # Important: don't remove keepAlive\n        # for pages as this allows\n        # to save the input state when switching\n        # between pages. If FALSE, each time a page is\n        # changed, inputs are reset.\n        list(path = make_link(), url = make_link(), name = \"home\", keepAlive = TRUE),\n        list(path = make_link(\"2\"), url = make_link(\"2\"), name = \"2\", keepAlive = TRUE),\n        list(path = make_link(\"3\"), url = make_link(\"3\"), name = \"3\", keepAlive = TRUE)\n      )\n    )\n  )\n)\n```\n:::\n\n\n### Updated md design\n\nBy updating to the latest Framework7 version, we now benefit from a totally revamped Android (md) design, which looks more modern. TO DO: demo app.\n\n### Refined inputs layout and style\n\nWhenever you have multiple inputs, we now recommend to wrap all of them within `f7List()` so as to benefit from new styling options such as outline, inset, strong, ... Internally, we use a function able to detect whether the input is inside a `f7List()`. If yes, you can style this list by passing parameters like `f7List(outline = TRUE, inset = TRUE, ...)`. If not, the input is internally wrapped in a list to have correct rendering but no styling is possible. Besides, some input like `f7Text()` can have custom styling (add an icon, clear button, outline style), which is independent from the external list wrapper style. Hence, we don't recommend doing `f7List(outline = TRUE, f7Text(outline = TRUE))` since it won't render very well and instead use `f7List(outline = TRUE, f7Text())`. \n\nBesides, independently from `f7List()`, some inputs having more specific styling options:\n\n- `f7AutoComplete()`.\n- `f7Text()`, `f7Password()`, `f7TextArea()`.\n- `f7Select()`.\n- `f7Picker()`, `f7ColorPicker()` and `f7DatePicker()`.\n- `f7Radio()` and `f7CheckboxGroup()`.\n\nIn practices, you can design a supercharged `f7Text()` by doing so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf7Text(\n    inputId = \"text\",\n    label = \"Text input\",\n    value = \"Some text\",\n    placeholder = \"Your text here\",\n    style = list(\n      description = \"A cool text input\",\n      outline = TRUE,\n      media = f7Icon(\"house\"),\n      clearable = TRUE,\n      floating = TRUE\n    )\n)\n```\n:::\n\n\nThis adds a description to the input (below its main content), as well as the outline style option, an icon on the left side. `clearable` is TRUE by default meaning that all text-based inputs can be cleared. `floating` is an effect that makes the label moving in and out the input area depending on the content state. When empty, the label is inside and when there is text, the label is pushed outside in its usual location.\n\n`f7Stepper()` and `f7Toggle()` label is now displayed on the left.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinyMobile)\n\nshinyApp(\n  ui = f7Page(\n    options = list(dark = FALSE, theme = \"ios\"),\n    title = \"Inputs Layout\",\n    f7SingleLayout(\n      navbar = f7Navbar(\n        title = \"Inputs Layout\",\n        hairline = FALSE\n      ),\n      f7List(\n        inset = TRUE,\n        dividers = TRUE,\n        strong = TRUE,\n        outline = FALSE,\n        f7Text(\n          inputId = \"text\",\n          label = \"Text input\",\n          value = \"Some text\",\n          placeholder = \"Your text here\"\n        ),\n        f7TextArea(\n          inputId = \"textarea\",\n          label = \"Text area input\",\n          value = \"Some text\",\n          placeholder = \"Your text here\"\n        ),\n        f7Select(\n          inputId = \"select\",\n          label = \"Make a choice\",\n          choices = 1:3,\n          selected = 1\n        ),\n        f7AutoComplete(\n          inputId = \"myautocomplete\",\n          placeholder = \"Some text here!\",\n          openIn = \"dropdown\",\n          label = \"Type a fruit name\",\n          choices = c(\n            \"Apple\", \"Apricot\", \"Avocado\", \"Banana\", \"Melon\",\n            \"Orange\", \"Peach\", \"Pear\", \"Pineapple\"\n          )\n        ),\n        f7Stepper(\n          inputId = \"stepper\",\n          label = \"My stepper\",\n          min = 0,\n          color = \"default\",\n          max = 10,\n          value = 4\n        ),\n        f7Toggle(\n          inputId = \"toggle\",\n          label = \"Toggle me\"\n        ),\n        f7Picker(\n          inputId = \"picker\",\n          placeholder = \"Some text here!\",\n          label = \"Picker Input\",\n          choices = c(\"a\", \"b\", \"c\"),\n          options = list(sheetPush = TRUE)\n        ),\n        f7DatePicker(\n          inputId = \"date\",\n          label = \"Pick a date\",\n          value = Sys.Date()\n        ),\n        f7ColorPicker(\n          inputId = \"mycolorpicker\",\n          placeholder = \"Some text here!\",\n          label = \"Select a color\"\n        )\n      ),\n      f7CheckboxGroup(\n        inputId = \"checkbox\",\n        label = \"Checkbox group\",\n        choices = c(\"a\", \"b\", \"c\"),\n        selected = \"a\",\n        style = list(\n          inset = TRUE,\n          dividers = TRUE,\n          strong = TRUE,\n          outline = FALSE\n        )\n      ),\n      f7Radio(\n        inputId = \"radio\",\n        label = \"Radio group\",\n        choices = c(\"a\", \"b\", \"c\"),\n        selected = \"a\",\n        style = list(\n          inset = TRUE,\n          dividers = TRUE,\n          strong = TRUE,\n          outline = FALSE\n        )\n      )\n    )\n  ),\n  server = function(input, output) {\n  }\n)\n```\n:::\n\n\nMoreover, we added a new super cool way to pass options to `f7Radio()` and `f7CheckboxGroup()`, namely `f7CheckboxChoice()` and `f7RadioChoice()` (note: you can't use `update_*` functions on them yet), so that you can pass more metadata and description to each option (instead of just the choice name in basic shiny inputs):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinyMobile)\n\nshinyApp(\n  ui = f7Page(\n    title = \"Update radio\",\n    f7SingleLayout(\n      navbar = f7Navbar(title = \"Update f7Radio\"),\n      f7Block(\n        f7Radio(\n          inputId = \"radio\",\n          label = \"Custom choices\",\n          choices = list(\n            f7RadioChoice(\n              \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            Nulla sagittis tellus ut turpis condimentum,\n            ut dignissim lacus tincidunt\",\n              title = \"Choice 1\",\n              subtitle = \"David\",\n              after = \"March 16, 2024\"\n            ),\n            f7RadioChoice(\n              \"Cras dolor metus, ultrices condimentum sodales sit\n            amet, pharetra sodales eros. Phasellus vel felis tellus.\n            Mauris rutrum ligula nec dapibus feugiat\",\n              title = \"Choice 2\",\n              subtitle = \"Veerle\",\n              after = \"March 17, 2024\"\n            )\n          ),\n          selected = 2,\n          style = list(\n            outline = TRUE,\n            strong = TRUE,\n            inset = TRUE,\n            dividers = TRUE\n          )\n        ),\n        textOutput(\"res\")\n      )\n    )\n  ),\n  server = function(input, output, session) {\n    output$res <- renderText(input$radio)\n  }\n)\n```\n:::\n\n\n### New `f7Treeview()` component\n\nA brand new input widget enter in the place. Please welcome `f7Treewiew()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinyMobile)\n\nshinyApp(\n  ui = f7Page(\n    title = \"My app\",\n    f7SingleLayout(\n      navbar = f7Navbar(title = \"f7Treeview\"),\n      # group treeview with selectable items\n      f7BlockTitle(\"Selectable items\"),\n      f7Block(\n        f7Treeview(\n          id = \"treeview1\",\n          selectable = TRUE,\n          f7TreeviewGroup(\n            title = \"Selected images\",\n            icon = f7Icon(\"folder_fill\"),\n            itemToggle = TRUE,\n            lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),\n                                                   icon = f7Icon(\"photo_fill\")))\n          )\n        ),\n        textOutput(\"selected\")\n      ),\n\n      # group treeview with checkbox items\n      f7BlockTitle(\"Checkbox\"),\n      f7Block(\n        f7Treeview(\n          id = \"treeview2\",\n          withCheckbox = TRUE,\n          f7TreeviewGroup(\n            title = \"Selected images\",\n            icon = f7Icon(\"folder_fill\"),\n            itemToggle = TRUE,\n            lapply(1:3, function(i) f7TreeviewItem(label = paste0(\"image\", i, \".png\"),\n                                                   icon = f7Icon(\"photo_fill\")))\n          )\n        ),\n        textOutput(\"selected2\")\n      )\n    )\n  ),\n  server = function(input, output) {\n    output$selected <- renderText(input$treeview1)\n    output$selected2 <- renderText(input$treeview2)\n  }\n)\n```\n:::\n\n\n### New `f7Form()`\n\nShiny does not provide HTML forms handling out of the box (a [form](https://www.w3schools.com/html/html_forms.asp) being composed of multiple input elements). That's why we introduce `f7Form()`. Contrary to basic shiny inputs, we don't get one input value per element but a single input value with a nested list for all inputs within the form, thereby allowing to reduce the number of inputs on the server side. `updateF7Form()` can quickly update any input from the form. As a side note, the current list of supported inputs is:\n\n- `f7Text()`\n- `f7TextArea()`\n- `f7Password()`\n- `f7Select()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinyMobile)\n\nshinyApp(\n  ui = f7Page(\n    f7SingleLayout(\n      navbar = f7Navbar(title = \"Inputs form\"),\n      f7Block(f7Button(\"update\", \"Click me\")),\n      f7BlockTitle(\"A list of inputs in a form\"),\n      f7List(\n        inset = TRUE,\n        dividers = FALSE,\n        strong = TRUE,\n        f7Form(\n          id = \"myform\",\n          f7Text(\n            inputId = \"text\",\n            label = \"Text input\",\n            value = \"Some text\",\n            placeholder = \"Your text here\",\n            style = list(\n              description = \"A cool text input\",\n              outline = TRUE,\n              media = f7Icon(\"house\"),\n              clearable = TRUE,\n              floating = TRUE\n            )\n          ),\n          f7TextArea(\n            inputId = \"textarea\",\n            label = \"Text Area\",\n            value = \"Lorem ipsum dolor sit amet, consectetur\n              adipiscing elit, sed do eiusmod tempor incididunt ut\n              labore et dolore magna aliqua\",\n            placeholder = \"Your text here\",\n            resize = TRUE,\n            style = list(\n              description = \"A cool text input\",\n              outline = TRUE,\n              media = f7Icon(\"house\"),\n              clearable = TRUE,\n              floating = TRUE\n            )\n          ),\n          f7Password(\n            inputId = \"password\",\n            label = \"Password:\",\n            placeholder = \"Your password here\",\n            style = list(\n              description = \"A cool text input\",\n              outline = TRUE,\n              media = f7Icon(\"house\"),\n              clearable = TRUE,\n              floating = TRUE\n            )\n          )\n        )\n      ),\n      verbatimTextOutput(\"form\")\n    )\n  ),\n  server = function(input, output, session) {\n    output$form <- renderPrint(input$myform)\n\n    observeEvent(input$update, {\n      updateF7Form(\n        \"myform\",\n        data = list(\n          \"text\" = \"New text\",\n          \"textarea\" = \"New text area\",\n          \"password\" = \"New password\"\n        )\n      )\n    })\n  }\n)\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}