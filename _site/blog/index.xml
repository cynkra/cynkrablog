<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>cynkra blog</title>
<link>https://cynkra.com/blog/blog/index.html</link>
<atom:link href="https://cynkra.com/blog/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>By the cynkra team</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Fri, 13 May 2022 22:00:00 GMT</lastBuildDate>
<item>
  <title>Accessing Google’s API via OAuth2</title>
  <dc:creator>Patrick Schratz</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2022-05-14-accessing-google-api-via-oauth2/index.html</link>
  <description><![CDATA[ 



<p>At cynkra we recently aimed to automate more parts of our internal toolstack. One tool is Google Workspace. Google Workspace offers a <a href="https://developers.google.com/workspace">comprehensive REST API</a> which can be used for automation purposes.</p>
<p>When interacting with an API, authentication is usually required. This is commonly done by adding a header to the request which includes an access token along with the actual API request. For many APIs these headers can be simple single access token of type <a href="https://swagger.io/docs/specification/authentication/bearer-authentication/">“Bearer”</a>. These tokens often have no expiration date and infinite scopes, meaning they can be used for any kind of request against the respective API endpoints. The risk with these tokens is that they are quite powerful and an attacker can somewhat easily get infinite access to your account, both in terms of scopes and time.</p>
<p>Therefore, many services recently started to favor the use of <a href="https://swagger.io/docs/specification/authentication/oauth2/">OAuth2</a> in a multi-stage authentication concept. The process can be broken down as follows:</p>
<ol type="1">
<li>An admin creates an OAuth2 app in the respective service (e.g.&nbsp;Google Cloud or Zoom) with limited scopes (i.e.&nbsp;only to certain parts of the API)</li>
<li>First an encoded “JSON Web Token” (JWT) must be created. In the specific case of the Google API, an access key and its secret from a Google “Service Account” (which needs to be created in the “Credentials” menu of Google Cloud) are required for signing the JWT during creation.</li>
<li>Next an API call makes a request against the OAuth2 app using the just created JWT token and gets a short-lived <em>Bearer</em> access token returned.</li>
<li>A third API call issues the actual API request.</li>
</ol>
<p>This multi-stage process can be automated by using automation tools like <em>Ansible</em> or similar. Yet the tricky part is usually the authentication against the OAuth2 app. Traditionally OAuth2 apps aim for GUI-based interaction, i.e., someone clicking a button to authorize the request. However, when aiming for automation via an API, this is not feasible. Instead the OAuth2 app should return the access token as code to further continue the automated workflow. There are plenty of Stackoverflow questions about this topic with many upvotes:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/10835365/authenticate-programmatically-to-google-with-oauth2">https://stackoverflow.com/questions/10835365/authenticate-programmatically-to-google-with-oauth2</a></li>
<li><a href="https://stackoverflow.com/questions/19766912/how-do-i-authorise-an-app-web-or-installed-without-user-intervention?noredirect=1&amp;lq=1">https://stackoverflow.com/questions/19766912/how-do-i-authorise-an-app-web-or-installed-without-user-intervention?noredirect=1&amp;lq=1</a></li>
<li><a href="https://stackoverflow.com/questions/71364188/how-to-authorize-a-curl-script-to-google-oauth-after-oauth-out-of-band-oob-flo/71374746#71374746">https://stackoverflow.com/questions/71364188/how-to-authorize-a-curl-script-to-google-oauth-after-oauth-out-of-band-oob-flo/71374746#71374746</a></li>
<li><a href="https://stackoverflow.com/questions/12710262/google-drive-redirect-uri-mismatch">https://stackoverflow.com/questions/12710262/google-drive-redirect-uri-mismatch</a></li>
</ul>
<section id="the-oob-deprecation" class="level2">
<h2 class="anchored" data-anchor-id="the-oob-deprecation">The “OOB” deprecation</h2>
<p>For many years there was a workaround by using <code>redirect_uri=urn:ietf:wg:oauth:2.0:oob</code> combined with <code>response_type=code</code> which was <a href="https://stackoverflow.com/questions/12710262/google-drive-redirect-uri-mismatch">widely shared across the web</a> and Youtube. Yet in Feburary 2022 Google finally <a href="https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html#instructions-oob">blocked this approach</a> as it is considered unsafe and more secure methods should be used.</p>
</section>
<section id="the-jwt-authentication-approach" class="level2">
<h2 class="anchored" data-anchor-id="the-jwt-authentication-approach">The “JWT” authentication approach</h2>
<p>Hence a new approach is needed to authenticate against Google OAuth2 apps programmatically. One of these is the use of <a href="https://jwt.io/">JSON Web Tokens</a> (JWT). These are different to <em>Bearer</em> tokens in the way that they must be signed and encrypted using a domain-wide access token and am specific algorithm which the OAuth2 apps expects (for future decoding purposes). The mentioned encryption is also not straightforward and usually requires <a href="https://developers.google.com/identity/protocols/oauth2/service-account#authorizingrequests">the use of an additional language</a> (e.g.&nbsp;Python, Ruby, Java) and a respective module which does the encryption. The key and its secret (in the Google case) which should be encrypted must be generated within a <em>service account</em> that was granted <a href="https://developers.google.com/admin-sdk/directory/v1/guides/delegation"><em>domain-wide delegation</em></a>. If such an encrypted JWT is sent to the OAuth2 app, it can verify the owner and issue a short-lived token with the respective scopes of the OAuth2 app.</p>
</section>
<section id="ansible-workflow-example" class="level2">
<h2 class="anchored" data-anchor-id="ansible-workflow-example">Ansible workflow example</h2>
<p>All of the above made the process of issueing a “simple” API call against the Google API quite cumbersome. This is why in the following a fully-working ansible approach is provided which uses a Ruby script for the initial JWT encryption.</p>
<p>This assumes</p>
<ul>
<li>a working Ruby installation at <code>/usr/bin/ruby</code></li>
<li>an existing Google service account with <em>domain wide delegation</em></li>
<li>an OAuth2 app to which the service account has acccess to with matching scopes required for the final API call</li>
</ul>
<p><em>Disclaimer: The <code>jwt.rb</code> script below and parts of the ansible logic are taken/adapted from another blog post which I am unable to find again.</em> <em>Memo to myself: always instantly store the link somewhere if you find some helpful content on a website…</em></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google Workspace: Create JWT for Google OAuth2"</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-3">    env ruby &lt;path/to/&gt;/jwt.rb --iss "google-workspace@&lt;some service account name&gt;.iam.gserviceaccount.com"</span>
<span id="cb1-4">    --sub "&lt;issuer email&gt;" --scope "{% raw %}{{ google_workspace_oauth2_api_scopes | join(' ') }}{% endraw %}"</span>
<span id="cb1-5">    --kid "{% raw %}{{ google_workspace_oauth2_key_id.value }}{% endraw %}"</span>
<span id="cb1-6">    --pkey "{% raw %}{{ google_workspace_oauth2_private_key.value }}{% endraw %}"</span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chdir</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/usr/bin/"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jwt</span></span></code></pre></div>
<p>Here <code>google_workspace_oauth2_api_scopes</code> is a list of Google API scopes</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">google_workspace_oauth2_api_scopes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.googleapis.com/auth/admin.directory.user'</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.googleapis.com/auth/admin.directory.group'</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.googleapis.com/auth/admin.directory.domain'</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.googleapis.com/auth/admin.directory.userschema'</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.googleapis.com/auth/apps.licensing'</span></span></code></pre></div>
<p>and <code>google_workspace_oauth2_key_id</code> and <code>google_workspace_oauth2_private_key</code> are the credentials from the respective service account used.</p>
<p>The <code>jwt.rb</code> file referenced in the call above looks as follows:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ruby code-with-copy"><code class="sourceCode ruby"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">#!/usr/bin/env ruby</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># frozen_string_literal: true</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'jwt'</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'optparse'</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'openssl'</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">options <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb3-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">OptionParser</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.new</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>opts<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-10">  opts<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.banner</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'Usage: jwt.rb [options]'</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">  opts<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.on</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'--iss ISS'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'Issuer'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>iss<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-13">    options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:iss</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> iss</span>
<span id="cb3-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb3-15">  opts<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.on</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'--sub SUB'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'Subject'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-16">    options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:sub</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span></span>
<span id="cb3-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb3-18">  opts<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.on</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'--scope SCOPE'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'API Scopes'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>scope<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-19">    options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:scope</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> scope</span>
<span id="cb3-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb3-21">  opts<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.on</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'--kid KID'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'Key id'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>kid<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-22">    options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:kid</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> kid</span>
<span id="cb3-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb3-24">  opts<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.on</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'--pkey PKEY'</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'Key'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span>pkey<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-25">    options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:pkey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> pkey</span>
<span id="cb3-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb3-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parse!</span></span>
<span id="cb3-28"></span>
<span id="cb3-29">iat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Time</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.now.to_i</span></span>
<span id="cb3-30">exp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> iat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># token is 900s valid</span></span>
<span id="cb3-31"></span>
<span id="cb3-32">payload <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span> <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">iss: </span>options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:iss</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.to_s</span>,</span>
<span id="cb3-33">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>: options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:sub</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.to_s</span>,</span>
<span id="cb3-34">            <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">scope: </span>options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:scope</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.to_s</span>,</span>
<span id="cb3-35">            <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">aud: </span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://oauth2.googleapis.com/token'</span>,</span>
<span id="cb3-36">            <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">kid: </span>options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:kid</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.to_s</span>,</span>
<span id="cb3-37">            <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">exp: </span>exp,</span>
<span id="cb3-38">            <span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">iat: </span>iat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-39"></span>
<span id="cb3-40">pkey <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> options<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="wa" style="color: #5E5E5E;
background-color: null;
font-style: italic;">:pkey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.to_s.gsub</span>(<span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'\n'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\n"</span>)</span>
<span id="cb3-41">priv_key <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">OpenSSL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PKey</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">::</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">RSA</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.new</span>(pkey)</span>
<span id="cb3-42"></span>
<span id="cb3-43">token <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">JWT</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.encode</span>(payload, priv_key, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'RS256'</span>)</span>
<span id="cb3-44"></span>
<span id="cb3-45"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">puts</span> token</span></code></pre></div>
<p>The important part is happening at the bottom: <code>JWT.encode</code> encodes the payload of the POST request, which consists of the API key from the service account. Specifically, the secret of the respective key pair (named <code>priv_key</code> here) is used to encrypt the payload.</p>
<p>Next, this JWT needs to be passed to the <code>https://oauth2.googleapis.com/token</code> endpoint to ask for a <em>Bearer</em> access token by using the following payload in the body:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google Workspace: Get access token from Google oauth2"</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uri</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://oauth2.googleapis.com/token"</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> POST</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grant_type={% raw %}{{ google_workspace_oauth2_grant_type }}&amp;assertion={{ jwt.stdout }}{% endraw %}"</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return_content</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> token</span></span></code></pre></div>
<p>Here, <code>google_workspace_oauth2_grant_type</code> needs to be <code>"urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer"</code>. This tells the endpoint that we are handing over a JWT token and want to get a <em>Bearer</em> token back.</p>
<p>Finally, this (short-lived) <em>Bearer</em> token can be used to issue the desired API call, e.g.&nbsp;creating a new user:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google Workspace: Create user"</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uri</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> POST</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://admin.googleapis.com/admin/directory/v1/users</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">headers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">authorization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bearer {% raw %}{{ token.json.access_token }}{% endraw %}"</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> json</span></span>
<span id="cb5-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "primaryEmail": "{% raw %}{{ username }}{% endraw %}@email.com",</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "password": "{% raw %}{{ user_password }}{% endraw %}",</span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "name": {</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">             "givenName": "{% raw %}{{ first_name }}{% endraw %}",</span></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">             "familyName": "{% raw %}{{ last_name }}{% endraw %}"</span></span>
<span id="cb5-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           },</span></span>
<span id="cb5-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "isAdmin": "{% raw %}{{ admin }}{% endraw %}"</span></span>
<span id="cb5-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         }'</span></span></code></pre></div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The OAuth2-API-Auth process to authenticate against the Google API is quite cumbersome and quite a few little things can go wrong. As for all other methods, it is not possible to say how long this method will stay functional. JWTs are a quite promising concept and it is likely that they will be around for quite some time as they are considered pretty save. The biggest challenge is usually to puzzle all bits together and find the correct documentation resource for the respective provider. Once it works, there’s almost no overhead when using tools like Ansible to automate the process.</p>
<p>It should be noted that the approach is quite generic: for some providers you might need to change the encoding algorithm when creating the JWT (e.g.&nbsp;for Zoom it needs to be <code>HS256</code>) but other than that you should be able to reuse the <code>jwt.rb</code> script.</p>
</section>
<section id="full-ansible-script" class="level2">
<h2 class="anchored" data-anchor-id="full-ansible-script">Full Ansible script</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google Workspace: Create JWT for Google OAuth2"</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">  command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-4">    env ruby &lt;path/to/&gt;/jwt.rb --iss "google-workspace@&lt;some service account name&gt;.iam.gserviceaccount.com"</span>
<span id="cb6-5">    --sub "&lt;issuer email&gt;" --scope "{% raw %}{{ google_workspace_oauth2_api_scopes | join(' ') }}{% endraw %}"</span>
<span id="cb6-6">    --kid "{% raw %}{{ google_workspace_oauth2_key_id.value }}{% endraw %}"</span>
<span id="cb6-7">    --pkey "{% raw %}{{ google_workspace_oauth2_private_key.value }}{% endraw %}"</span>
<span id="cb6-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">args</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chdir</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/usr/bin/"</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> jwt</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google Workspace: Get access token from Google oauth2"</span></span>
<span id="cb6-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uri</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://oauth2.googleapis.com/token"</span></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> POST</span></span>
<span id="cb6-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grant_type={% raw %}{{ google_workspace_oauth2_grant_type }}{% endraw %}&amp;assertion={% raw %}{{ jwt.stdout }}{% endraw %}"</span></span>
<span id="cb6-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return_content</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">register</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> token</span></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Google Workspace: Create user"</span></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uri</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> POST</span></span>
<span id="cb6-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">url</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://admin.googleapis.com/admin/directory/v1/users</span></span>
<span id="cb6-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">headers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">authorization</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bearer {% raw %}{{ token.json.access_token }}{% endraw %}"</span></span>
<span id="cb6-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body_format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> json</span></span>
<span id="cb6-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">body</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{</span></span>
<span id="cb6-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "primaryEmail": "{% raw %}{{ username }}{% endraw %}@email.com",</span></span>
<span id="cb6-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "password": "{% raw %}{{ user_password }}{% endraw %}",</span></span>
<span id="cb6-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "name": {</span></span>
<span id="cb6-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">             "givenName": "{% raw %}{{ first_name }}{% endraw %}",</span></span>
<span id="cb6-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">             "familyName": "{% raw %}{{ last_name }}{% endraw %}"</span></span>
<span id="cb6-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           },</span></span>
<span id="cb6-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">           "isAdmin": "{% raw %}{{ admin }}{% endraw %}"</span></span>
<span id="cb6-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         }'</span></span></code></pre></div>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2022-05-14-accessing-google-api-via-oauth2/index.html</guid>
  <pubDate>Fri, 13 May 2022 22:00:00 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2022-05-14-accessing-google-api-via-oauth2/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Celebrating one-year anniversary as RStudio Full Service Certified Partner</title>
  <dc:creator>Cosima Meyer, Patrick Schratz</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2021-07-09-certified-partner-anniversary/index.html</link>
  <description><![CDATA[ 



<p>cynkra celebrates its first anniversary as an <a href="https://rstudio.com/certified-partners/">RStudio Full Service Certified Partner</a>! Every day, we help our clients set up professional IT infrastructures using RStudio products and license compositions suited to their individual needs. In the context of our anniversary, we would like to discuss the RStudio suite of products and our approach of combining RStudio’s products with our Managed Workbench Solution to make RStudio Professional products even more powerful.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2021-07-09-certified-partner-anniversary/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Adi Goldstein
</figcaption>
</figure>
<section id="philosophy-and-lineup" class="level3">
<h3 class="anchored" data-anchor-id="philosophy-and-lineup">Philosophy and lineup</h3>
<p>We believe that good tools combined with smart settings can make data science teams enjoy their work more, resulting in higher productivity levels. We, therefore, work to provide our clients with customized RStudio product solutions to create a data science environment that would support their daily work most efficiently and effectively.</p>
<p>Our <a href="https://cynkra.com/about">team members</a>, who have all been using practically all RStudio products daily, are testimony to our claims.</p>
</section>
<section id="finding-the-right-setup" class="level3">
<h3 class="anchored" data-anchor-id="finding-the-right-setup">Finding the right setup</h3>
<p>Besides finding the optimal combination of different software provided by RStudio, we customize the RStudio products to include smart defaults and individualized configurations such as local package repositories or preconfigured database setups. We use a full-fledged configured and centralized managed RStudio Workbench installation that simplifies administrative tasks for system admins and users. In addition, we ensure constant product and security updates, taking away all the maintenance burden and leaving users with a happy place for their data science tasks. We also train the team on how to work with RStudio Products.</p>
<p>The transition from the local RStudio Desktop usage is seamless since RStudio Workbench and friends provide all features of the free version.</p>
<p>There is no lock-in; everything that works on the free RStudio Desktop version will also work on RStudio Workbench and the other way round – even if you decide to go back to the free version at some point. Of course, once clients have experienced the added benefits of RStudio Workbench, they rarely want to go back.</p>
<p>Our lineup consists of the following RStudio products: <a href="https://www.rstudio.com/products/workbench/">RStudio Workbench (previously RStudio Server Pro)</a>, <a href="https://rstudio.com/products/connect/">RStudio Connect</a>, <a href="https://www.rstudio.com/products/package-manager/">RStudio Package Manager</a>, <a href="https://www.rstudio.com/products/shiny/shiny-server/">Shiny Server</a>, and <a href="https://rstudio.com/products/team/">RStudio Team</a>.</p>
</section>
<section id="smart-defaults-and-optimized-configurations" class="level3">
<h3 class="anchored" data-anchor-id="smart-defaults-and-optimized-configurations">Smart defaults and optimized configurations</h3>
<p>RStudio Workbench, RStudio Connect, and RStudio Package Manager can work together very well if configured correctly. We configure the settings as needed to enable users to experience the full power of the RStudio product suite. Our product saves you from having to go through the entire <a href="https://docs.rstudio.com/ide/server-pro/latest/index.html">admin guide</a> where there is always the potential to miss something important. The power (and complexity) of RStudio products resides in their configuration. We have experience with almost all possible configuration scenarios, including configuring RStudio products in highly secured enterprise environments.</p>
</section>
<section id="dockerized-environment" class="level3">
<h3 class="anchored" data-anchor-id="dockerized-environment">Dockerized environment</h3>
<p>Our products come in a <em>containerized environment</em>, making them agnostic to any underlying operating system. Your users will have access to an Ubuntu LTS system (20.04 at the time of writing) which provides stable support for linking R packages against required system libraries.</p>
<p>Using a containerized environment also simplifies update tasks (for the client and us) due to the independence of the underlying operating system. All of this also holds if the underlying operating system of your company is subject to change in the future – and if this happens, the RStudio environment will stay the same.</p>
<p>Another common pain point for local RStudio users is the use of LaTeX and pandoc when compiling PDF reports. By relying on the stable Ubuntu LTS environment as the base layer we can provide a stable LaTeX/pandoc environment that takes away almost all troubles for users in this area.</p>
</section>
<section id="performance" class="level3">
<h3 class="anchored" data-anchor-id="performance">Performance</h3>
<p>Centralized, server-based installations can be very efficient both in speed and battery consumption. It applies to all RStudio products but in particular to RStudio Workbench and RStudio Package Manager.</p>
<p>The following GIF might give you an idea of speed improvement (we did the test using a relatively new MacBook Pro 2020). When we deployed the cloud-based RStudio Workbench on the MacBook, the machine performed much faster. The difference in speed will be even more noticeable in an older machine.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cynkra.com/blog/blog/2021-07-09-certified-partner-anniversary/rstudio-desktop-vs-rsw.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">RStudio Desktop vs.&nbsp;RStudio Workbench speed comparison</figcaption>
</figure>
</div>
<p>Battery usage becomes critical when working from home or on the go. Using RStudio Workbench instead of RStudio Desktop will save battery life because all computation is done on a remote machine. RStudio Desktop, in particular, is quite energy-hungry; we have experienced battery life improvements of 30% and more in our daily work when using the cloud-based RStudio Workbench instead of RStudio Desktop.</p>
</section>
<section id="custom-real-world-examples" class="level3">
<h3 class="anchored" data-anchor-id="custom-real-world-examples">Custom real-world examples</h3>
<p>One of the key strengths of our offering is individualization. To provide more details on this, we put together some configurations we implemented recently to give an idea of what individualized setups can look like in practice.</p>

<table class="table">
<thead>
<tr>
<th scope="col">
</th>
<th scope="col" style="text-align: center;">
Setup&nbsp;1
</th>
<th scope="col" style="text-align: center;">
Setup&nbsp;2
</th>
<th scope="col" style="text-align: center;">
Setup&nbsp;3
</th>
<th scope="col" style="text-align: center;">
Setup&nbsp;4
</th>
</tr>
</thead>
<tbody>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
RStudio Workbench
</th>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
RStudio Connect
</th>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
RStudio Package Manager
</th>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
RStudio Server Open Source
</th>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
Shiny Server
</th>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
✓
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
User Provisioning
</th>
<td style="text-align: center; vertical-align: middle;">
Active Directory
</td>
<td style="text-align: center; vertical-align: middle;">
LDAP
</td>
<td style="text-align: center; vertical-align: middle;">
Local Users
</td>
<td style="text-align: center; vertical-align: middle;">
Active Directory
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
SSO Type
</th>
<td style="text-align: center; vertical-align: middle;">
PAM
</td>
<td style="text-align: center; vertical-align: middle;">
OIDC
</td>
<td style="text-align: center; vertical-align: middle;">
</td>
<td style="text-align: center; vertical-align: middle;">
SAML
</td>
</tr>
<tr>
<th scope="row" style="text-align: left; vertical-align: middle;">
DB Drivers
</th>
<td style="text-align: center; vertical-align: middle;">
RStudio Professional Drivers
</td>
<td style="text-align: center; vertical-align: middle;">
MS SQL
</td>
<td style="text-align: center; vertical-align: middle;">
Oracle
</td>
<td style="text-align: center; vertical-align: middle;">
IBM DB2
</td>
</tr>
</tbody>

</table>
<p>Acronym dictionary for Table:</p>
<ul>
<li>SSO: Single-Sign-On</li>
<li>OIDC: OpenID Connect</li>
<li>PAM: Pluggable Authentication Modules</li>
</ul>
<p>Often, in larger organizations, the system that is already in use determines the authentication settings. We have experience configuring RStudio Products with various authentication solutions.</p>
</section>
<section id="standalone-licenses-and-r-training" class="level3">
<h3 class="anchored" data-anchor-id="standalone-licenses-and-r-training">Standalone licenses and R training</h3>
<p>Besides the complete package that comes with our Managed Workbench offering, we are happy to provide our customers with standalone RStudio licenses. The advantage for Swiss-based customers is that they get a bill in Swiss Francs including VAT, and avoid currency conversion issues with USD when ordering from RStudio directly.</p>
<p>In addition to setting up R-related infrastructure, we also provide R training of any kind so that your team can make full use of the available software stack. You can visit our <a href="https://cynkra.com/consulting">consulting offering on our website</a> for more information.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2021-07-09-certified-partner-anniversary/index.html</guid>
  <pubDate>Thu, 08 Jul 2021 22:00:00 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2021-07-09-certified-partner-anniversary/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Scientist (80-100%)</title>
  <dc:creator>cynkra team</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2022-04-27-data-scientist/index.html</link>
  <description><![CDATA[ 



<p>We are hiring a data scientist! You enjoy working with R and know a bit about Shiny, the tidyverse, and Git. We offer work on interesting projects around the R ecosystem, with lots of freedom and flexibility and the option to work remotely.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2022-04-27-data-scientist/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Scott Webb
</figcaption>
</figure>
<!--
convert scott-webb-208072-unsplash.jpg -resize 600x -gravity center -extent 300x300 -quality 80 senior-data-scientist.jpg
 -->
<!-- <figure>
<img alt="Illustration" src="../user/img/about/zurich.jpg" style=" width: 100%; height: auto">
<figcaption>
  Photo by Samuel Zeller
</figcaption>
</figure>

 -->
<section id="what-we-look-for" class="level4">
<h4 class="anchored" data-anchor-id="what-we-look-for">What we look for</h4>
<ul>
<li><p>Very good knowledge of R, in particular Shiny and the tidyverse</p></li>
<li><p>Basic knowledge of Git</p></li>
<li><p>Experience with databases is a plus</p></li>
<li><p>80%-100% commitment, can be adapted throughout the year</p></li>
<li><p>Ability and desire to learn and improve on the job</p></li>
<li><p>Good working knowledge of written English</p></li>
<li><p>Very good command of spoken English or German</p></li>
</ul>
</section>
<section id="what-we-offer" class="level4">
<h4 class="anchored" data-anchor-id="what-we-offer">What we offer</h4>
<ul>
<li><p>Interesting projects around consulting and open-source software development</p></li>
<li><p>Remote first: work wherever (and whenever) you want, some on-site presence might be required</p></li>
<li><p>Focused work and asynchronous communication, keeping meetings to a minimum</p></li>
<li><p>Compassionate learning-oriented work environment: we help each other grow and get better at what we do</p></li>
<li><p>Full flexibility: we adjust to your needs, especially if you have family commitments</p></li>
<li><p>Nice offices in Zurich: Stauffacher (downtown), Zürich Affoltern (near ETH Hönggerberg)</p></li>
<li><p>Attractive compensation</p></li>
</ul>
</section>
<section id="how-to-apply" class="level4">
<h4 class="anchored" data-anchor-id="how-to-apply">How to apply</h4>
<p>Please submit your application via <a href="mailto:mail@cynkra.com">mail@cynkra.com</a>, or share a private GitHub repository with us. Get in touch with us if you have further questions.</p>
</section>
<section id="who-we-are" class="level4">
<h4 class="anchored" data-anchor-id="who-we-are">Who we are</h4>
<p>cynkra is a Zurich-based data consulting company with a strong focus on R. We use R and the tidyverse in the vast majority of our projects. We support businesses and organizations by helping them pick the right tools, implementing solutions, training, and code review. We are enthusiastic about open-source software and contribute to it, too. Learn more at <a href="http://www.cynkra.com">www.cynkra.com</a>.</p>
</section>
<section id="you-are-welcome" class="level4">
<h4 class="anchored" data-anchor-id="you-are-welcome">You are welcome!</h4>
<p>We are an equal opportunity employer who recruits, employs, trains, compensates and promotes regardless of age, color, disability, ethnicity, family or marital status, gender identity or expression, language, national origin, physical and mental ability, political affiliation, race, religion, sexual orientation, socio-economic status, and other characteristics that make our employees unique. We are committed to fostering, cultivating and preserving a culture of diversity, equity and inclusion.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2022-04-27-data-scientist/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2022-04-27-data-scientist/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Scientist/Engineer (40-100%)</title>
  <dc:creator>cynkra team</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2019-03-21-senior-data-scientist/index.html</link>
  <description><![CDATA[ 



<p>We are hiring a data scientist/engineer! You are enthusiastic about R and know a bit about Git – everything else is negotiable. You will work on interesting projects around the R ecosystem, and you will have lots of freedom, with the option to work remotely.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2019-03-21-senior-data-scientist/2019-03-21-job.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Scott Webb
</figcaption>
</figure>
<!--
convert scott-webb-208072-unsplash.jpg -resize 600x -gravity center -extent 300x300 -quality 80 senior-data-scientist.jpg
 -->
<!-- <figure>
<img alt="Illustration" src="../user/img/about/zurich.jpg" style=" width: 100%; height: auto">
<figcaption>
  Photo by Samuel Zeller
</figcaption>
</figure>

 -->
<section id="what-we-look-for" class="level4">
<h4 class="anchored" data-anchor-id="what-we-look-for">What we look for</h4>
<ul>
<li><p>Very good knowledge of R</p></li>
<li><p>Basic knowledge of Git</p></li>
<li><p>Experience in Machine Learning, Statistics, Programming</p></li>
<li><p>Experience with Databases, Teaching, shiny, tidyverse, etc., is a plus</p></li>
<li><p>40%-100% commitment, can be adapted throughout the year</p></li>
<li><p>Ability and desire to learn and improve on the job</p></li>
<li><p>Good working knowledge of written English</p></li>
<li><p>Very good command of spoken English or German</p></li>
</ul>
</section>
<section id="what-we-offer" class="level4">
<h4 class="anchored" data-anchor-id="what-we-offer">What we offer</h4>
<ul>
<li><p>Interesting projects around consulting and open-source software development</p></li>
<li><p>Nice private office in Zurich close to ETH Hönggerberg, with free coffee during office hours</p></li>
<li><p>Remote work possible</p></li>
<li><p>Competitive compensation</p></li>
</ul>
</section>
<section id="how-to-apply" class="level4">
<h4 class="anchored" data-anchor-id="how-to-apply">How to apply</h4>
<p>Please submit your application via <a href="mailto:mail@cynkra.com">mail@cynkra.com</a>, or share a private GitHub repository with us. Get in touch with us if you have further questions.</p>
</section>
<section id="who-we-are" class="level4">
<h4 class="anchored" data-anchor-id="who-we-are">Who we are</h4>
<p>cynkra is a Zurich-based data consulting company with a strong focus on R. We use R and the tidyverse in the vast majority of our projects. We support businesses and organizations by helping them pick the right tools, implementing solutions, training, and code review. We are enthusiastic about open-source software and contribute to it, too. Learn more at <a href="http://www.cynkra.com">www.cynkra.com</a>.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2019-03-21-senior-data-scientist/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
</item>
<item>
  <title>Deprecating a pkgdown site served via GitHub Pages</title>
  <dc:creator>Patrick Schratz, Kirill Müller</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2021-04-09-deprecating-pkgdown/index.html</link>
  <description><![CDATA[ 



<p>Websites for R packages built with <a href="https://pkgdown.r-lib.org/">{pkgdown}</a> have become a de-facto standard over the last few years. Many R packages build their site during Continuous Integration (CI) runs, pushing the assets to the special <code>gh-pages</code> branch (even though now <a href="https://github.blog/changelog/2020-09-03-build-and-deploy-github-pages-from-any-branch/">any branch can be used to deploy a website</a>).</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2021-04-09-deprecating-pkgdown/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Paweł Czerwiński
</figcaption>
</figure>
<p><br></p>
<p>Sometimes, repositories are transferred to a new user/organization or the package is renamed. While GitHub takes care of redirecting repository URLs, the pkgdown URLs (<code>https://&lt;username&gt;.github.io/&lt;rpackage&gt;</code>) are not redirected. Since some users might have bookmarked specific URLs or the URLs appear in their browsing history, it would be great if these links do not return a 404.</p>
<p>This blog post proposes several ways to handle this gracefully:</p>
<ul>
<li>Redirection</li>
<li>Deprecation with CSS</li>
<li>Deprecation via bulk edit</li>
</ul>
<p>All options hinge on the observation that users and organizations can create a <a href="https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites">user or organization site</a> that will be the source for <code>https://&lt;username&gt;.github.io/&lt;package&gt;</code> after the renaming. The user site will also serve <code>robots.txt</code> that advises crawlers to avoid deprecated contents.</p>
<section id="user-or-organization-site" class="level2">
<h2 class="anchored" data-anchor-id="user-or-organization-site">User or organization site</h2>
<p>In GitHub, users can create a <em>user repository</em> <code>&lt;username&gt;/&lt;username&gt;.github.io</code>. This repo will be served automatically as a web page on <code>https://&lt;username&gt;.github.io/</code> . In this repo, a directory can be created which corresponds to the respective GitHub Pages site of the original repo. Example: The <code>rpackage/</code> directory in the <code>&lt;username&gt;/&lt;username&gt;.github.io</code> repository corresponds to <code>https://&lt;username&gt;.github.io/rpackage</code>. If both <code>&lt;username&gt;/&lt;rpackage&gt;</code> and <code>&lt;username&gt;/&lt;username&gt;.github.io/&lt;rpackage&gt;</code> exist, the former takes precedence. This means that you can prepare everything in your user repository <code>&lt;username&gt;/&lt;username&gt;.github.io</code> and it will work immediately after you rename your package repository. The following has worked for <a href="https://krlmlr.github.io/fledge/" class="uri">https://krlmlr.github.io/fledge/</a>, which has moved to <a href="https://cynkra.github.io/fledge/" class="uri">https://cynkra.github.io/fledge/</a>:</p>
<ul>
<li>Create repository <code>&lt;username&gt;/&lt;username&gt;.github.io</code></li>
<li>In <code>&lt;username&gt;/&lt;username&gt;.github.io</code> create directory <code>&lt;rpackage&gt;</code></li>
<li>Populate the <code>&lt;rpackage&gt;</code> directory using one of the methods described below</li>
<li>Push to GitHub</li>
<li>Rename repository</li>
</ul>
<p>All of this works the same way for organizations. The <a href="https://cynkra.github.io/munch/">munch package</a> was previously located at <a href="https://cynkra.github.io/SwissCommunes/" class="uri">https://cynkra.github.io/SwissCommunes/</a> The original pages, with a warning, are defined at <a href="https://github.com/cynkra/cynkra.github.io/">cynkra/cynkra.github.io</a>.</p>
</section>
<section id="redirection" class="level2">
<h2 class="anchored" data-anchor-id="redirection">Redirection</h2>
<p>Basic idea: set up an HTML redirect from <code>https://&lt;username-old&gt;.github.io/&lt;package&gt;</code> to <code>https://&lt;username-new&gt;.github.io/&lt;package&gt;</code>.</p>
<p>To achieve this, create an <code>index.html</code> in <code>&lt;username&gt;/&lt;username&gt;.github.io/rpackage</code> with the following contents:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;meta</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">http-equiv</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"refresh"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">content</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0; url=</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">url to redirect to&gt;"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">/&gt;</span></span></code></pre></div>
<p>However, some redirection practices like this one are considered bad practice (“Use of meta refresh is discouraged by the World Wide Web Consortium (W3C).”)[^1]. Also, users might find it sketchy to see some redirection happening shortly after they visited a site. Last, the redirection shown above only works for the top-level domain. Level 2 or level 3 links like <code>&lt;url&gt;/level1/level2</code> will not work and return a 404.</p>
</section>
<section id="deprecation-via-css" class="level2">
<h2 class="anchored" data-anchor-id="deprecation-via-css">Deprecation via CSS</h2>
<p>A better way to deprecate a pkgdown/GitHub Pages site is to serve a static version of the last state before the package was moved, and add information to the user that the site has moved.</p>
<p>An easy way to achieve this is to include a little CSS snippet. The following will add a colored line before the <code>page-header</code> div in the pkgdown site.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.page-header</span><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:after</span> {</span>
<span id="cb2-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">content</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are viewing an outdated page which is not going to be updated anymore. Please go to &lt;https:/new-url.com&gt; for the latest version."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">font-size</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">px</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">font-style</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">italic</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">color</span>: <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">#f03333</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">}</span></code></pre></div>
<figure class="figure">
<img alt="Screenshot: Deprecation via CSS" src="https://cynkra.com/blog/blog/posts/2021-04-09-deprecating-pkgdown/css.png" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Deprecation information in the header via CSS
</figcaption>
</figure>
<p><br></p>
<p>Place this code in the <code>pkgdown/</code> directory of your package and it will be automatically picked up when the site is built next time:</p>
<ul>
<li>In your package, add the CSS snippet from above to <code>pkgdown/extra.css</code> (CSS name can be different) in the repository/R package which should be deprecated</li>
<li>Call <code>pkgdown::build_site()</code> one last time</li>
<li>Copy the contents of <code>docs/</code> to <code>&lt;username&gt;/&lt;username&gt;.github.io/&lt;packagename&gt;</code></li>
</ul>
<p>Unfortunately, the <code>:after</code> operator does not allow hyperlinks, so the new URL will not be clickable.</p>
</section>
<section id="deprecation-via-bulk-edit" class="level2">
<h2 class="anchored" data-anchor-id="deprecation-via-bulk-edit">Deprecation via bulk edit</h2>
<p>For the URL to be clickable, the HTML files must be edited. The <code>find</code>, <code>xargs</code> and <code>sed</code> utilities help to automate this.</p>
<p>pkgdown uses the Bootstrap framework, which has <a href="https://getbootstrap.com/docs/3.3/components/#alerts">alerts</a> that serve the purpose. They look best just before the closing <code>&lt;/header&gt;</code> element. The following command line adds an alert to each HTML page, advertising <a href="https://cynkra.github.io/munch" class="uri">https://cynkra.github.io/munch</a> as the target URL. It must be run in the <code>rpackage</code> directory of <code>&lt;username&gt;/&lt;username&gt;.github.io</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.html"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xargs</span> sed <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s#(^.*[&lt;]/header[&gt;])#&lt;div class="alert alert-warning" role="alert"&gt;&lt;strong&gt;Warning!&lt;/strong&gt; This content has moved to &lt;a href="https://cynkra.github.io/munch"&gt;https://cynkra.github.io/munch&lt;/a&gt;.&lt;/div&gt;\n\1#'</span></span></code></pre></div>
<p>This assumes GNU <code>sed</code>. MacOS users will need to use <code>gsed</code>, or <code>-i.bak</code> instead of <code>-i</code> and deal with the leftover <code>*.bak</code> files.</p>
<figure class="figure">
<img alt="Screenshot: Deprecation via editing HTML" src="https://cynkra.com/blog/blog/posts/2021-04-09-deprecating-pkgdown/bootstrap.png" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Deprecation information in the header via editing HTML
</figcaption>
</figure>
<p><br></p>
<p>Always advertising the new root works well enough because it is very likely that the structure of the site will eventually change after the repository rename.</p>
</section>
<section id="web-crawlers" class="level2">
<h2 class="anchored" data-anchor-id="web-crawlers">Web crawlers</h2>
<p>It is a good idea to make the deprecated contents invisible to web crawlers. Add a file <a href="https://developers.google.com/search/docs/advanced/robots/create-robots-txt"><code>robots.txt</code></a> to the root of <code>&lt;username&gt;/&lt;username&gt;.github.io</code>. The following contents forbids crawling the <a href="https://cynkra.github.io/SwissCommunes/"><code>/SwissCommunes/</code> directory</a> which contains the old snapshot with pointers to the new location:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb4-1">User-agent: *</span>
<span id="cb4-2">Disallow: /SwissCommunes/</span></code></pre></div>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2021-04-09-deprecating-pkgdown/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2021-04-09-deprecating-pkgdown/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>DevOps Expert (f/m/d, 60-100%)</title>
  <dc:creator>cynkra team</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2020-09-15-devops/index.html</link>
  <description><![CDATA[ 



<p>We are on the lookout for a DevOps System Engineer. You are familiar with Linux, Docker, Git, CI/CD, and Ansible. You will work on interesting projects around the R ecosystem and have a lot of freedom. While you will be required to work on-site at times, remote work is also possible. If you are interested in data science and want to learn more about R, you will enjoy working in this position.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2020-09-15-devops/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by James Pond
</figcaption>
</figure>
<section id="your-role" class="level4">
<h4 class="anchored" data-anchor-id="your-role">Your role</h4>
<ul>
<li><p>Responsibility for enhancing and maintaining our hosted RStudio service products and our internal infrastructure</p></li>
<li><p>Communicating with IT departments of our clients</p></li>
<li><p>Setting up and maintaining infrastructure as code</p></li>
</ul>
</section>
<section id="what-we-look-for" class="level4">
<h4 class="anchored" data-anchor-id="what-we-look-for">What we look for</h4>
<ul>
<li><p>Very good knowledge of Linux, Docker, Git, CI/CD, and Ansible.</p></li>
<li><p>60%-100% commitment</p></li>
<li><p>Ability and desire to learn and improve on the job</p></li>
<li><p>Very good command of written and spoken German</p></li>
<li><p>Good working knowledge of written and spoken English</p></li>
<li><p>An interest in R and data science, in general, is a plus.</p></li>
</ul>
</section>
<section id="what-we-offer" class="level4">
<h4 class="anchored" data-anchor-id="what-we-offer">What we offer</h4>
<ul>
<li><p>An open-source, friendly environment that encouranges community contribution</p></li>
<li><p>Interesting projects around consulting and open-source software development</p></li>
<li><p>Offices in Zurich: at Stauffacher and near ETH Hönggerberg</p></li>
<li><p>Flexible working hours with the possibility to work from home</p></li>
</ul>
</section>
<section id="how-to-apply" class="level4">
<h4 class="anchored" data-anchor-id="how-to-apply">How to apply</h4>
<p>Please submit your application via <a href="mailto:mail@cynkra.com">mail@cynkra.com</a>. Get in touch with us if you have further questions.</p>
</section>
<section id="who-we-are" class="level4">
<h4 class="anchored" data-anchor-id="who-we-are">Who we are</h4>
<p>cynkra is a Zurich-based data consulting company with a strong focus on R. We use R and the tidyverse in the vast majority of our projects. We are an RStudio Full Certified Partner.</p>
<p>We support businesses and organizations by helping them pick the right tools, implementing solutions, training, and code review. We are enthusiastic about open-source software and contribute to a large number of R packages. Learn more at <a href="http://www.cynkra.com">www.cynkra.com</a>.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2020-09-15-devops/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2020-09-15-devops/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>DevOps System Engineer (40-60%)</title>
  <dc:creator>cynkra team</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2019-08-02-system-engineer/index.html</link>
  <description><![CDATA[ 



<p>We are hiring a system engineer! You are familiar with Ansible, Terraform, Docker, Git, CI/CD. You will work on interesting projects around the R ecosystem and have a lot of freedom. While you will be required to work on-site at times, remote work is also possible. If you are interested in data science and want to learn more about R, you will enjoy working in this position.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2019-08-02-system-engineer/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Samuel Zeller
</figcaption>
</figure>
<section id="your-role" class="level4">
<h4 class="anchored" data-anchor-id="your-role">Your role</h4>
<ul>
<li><p>Responsibility for enhancing and maintaining our hosted service project and our internal infrastructure</p></li>
<li><p>Communicating with IT departments of our clients</p></li>
<li><p>Setting up infrastructure as code</p></li>
<li><p>Hiring and supervising nearshore development, with own budget</p></li>
</ul>
</section>
<section id="what-we-look-for" class="level4">
<h4 class="anchored" data-anchor-id="what-we-look-for">What we look for</h4>
<ul>
<li><p>Very good knowledge of Ansible, Terraform, Docker, Git, CI/CD.</p></li>
<li><p>An interest in R and data science, in general, is a plus</p></li>
<li><p>40%-60% commitment</p></li>
<li><p>Ability and desire to learn and improve on the job</p></li>
<li><p>Good working knowledge of written and spoken English</p></li>
<li><p>Very good command of spoken German</p></li>
</ul>
</section>
<section id="what-we-offer" class="level4">
<h4 class="anchored" data-anchor-id="what-we-offer">What we offer</h4>
<ul>
<li><p>Interesting projects around consulting and open-source software development</p></li>
<li><p>Office in Zurich close to ETH Hönggerberg</p></li>
<li><p>Flexible working hours</p></li>
<li><p>Remote work possible</p></li>
<li><p>Competitive compensation</p></li>
</ul>
</section>
<section id="how-to-apply" class="level4">
<h4 class="anchored" data-anchor-id="how-to-apply">How to apply</h4>
<p>Please submit your application via <a href="mailto:mail@cynkra.com">mail@cynkra.com</a>. Get in touch with us if you have further questions.</p>
</section>
<section id="who-we-are" class="level4">
<h4 class="anchored" data-anchor-id="who-we-are">Who we are</h4>
<p>cynkra is a Zurich-based data consulting company with a strong focus on R. We use R and the tidyverse in the vast majority of our projects. We support businesses and organizations by helping them pick the right tools, implementing solutions, training, and code review. We are enthusiastic about open-source software and contribute to it, too. Learn more at <a href="http://www.cynkra.com">www.cynkra.com</a>.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2019-08-02-system-engineer/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2019-08-02-system-engineer/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Done “Establishing DBI”!?</title>
  <dc:creator>Kirill Müller</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2018-05-01-dbi-2/index.html</link>
  <description><![CDATA[ 



<p>The “Establishing DBI” project, funded by the R consortium, started about a year ago. It includes the completion of two new backends, <em>RPostgres</em> and <em>RMariaDB</em>, and quite a few interface extensions and specifications.</p>
<p>Learn more about DBI, R’s database interface, on <a href="https://r-dbi.org" class="uri">https://r-dbi.org</a>.</p>
<p>This blog post showcases only the visible changes, a substantial amount of work went into extending the DBI specification and making the three open-source database backends compliant to it. After describing the release of the two new backends <em>RMariaDB</em> and <em>RPostgres</em>, I’ll be discussing the following improvements:</p>
<ul>
<li>Consistent support for accessing tables in schemas</li>
<li>Quoting literal values, in addition to strings and identifiers</li>
<li>More fine-grained creation of tables</li>
<li>Reading and writing 64-bit integers</li>
<li>Reading geometry columns from a PostGIS database</li>
<li>Handling of duplicate column names</li>
<li>New helpers in <em>DBI</em></li>
<li>Reusing code across backends</li>
</ul>
<p>I conclude with an outlook on things left to do.</p>
<section id="release-of-rpostgres-and-rmariadb" class="level2">
<h2 class="anchored" data-anchor-id="release-of-rpostgres-and-rmariadb">Release of <em>RPostgres</em> and <em>RMariaDB</em></h2>
<p>The DBI specification has been formulated in the preceding R consortium project, “Improving DBI”. It is both an automated test suite and a human-readable description of behavior, implemented in the <em>DBItest</em> package. For this project, I extended this specification and could also use it to implement <em>RPostgres</em> and <em>RMariaDB</em>: for once, test-driven development was pure pleasure because the tests were already there!</p>
<p>I took over maintenance of the <em>RPostgres</em> and <em>RMariaDB</em> packages, which are complete rewrites of the <em>RPostgreSQL</em> and <em>RMySQL</em> packages, respectively. These packages use C++ (with <em>Rcpp</em>) as the glue between R and the native database libraries. A reimplementation and release under a different name has made it much easier to fully conform to the DBI specification: only listing temporary tables and casting to blob or character is not supported by <em>RMariaDB</em> (due to a limitation of the DBMS), all other parts of the specification are fully covered.</p>
<p>Projects that use <em>RPostgreSQL</em> or <em>RMySQL</em> can continue to do so, or switch to the new backends at their own pace (which likely requires some changes to the code). For new projects I recommend <em>RPostgres</em> or <em>RMariaDB</em> to take advantage of the thorougly tested codebases and of the consistency across backends.</p>
</section>
<section id="schema-support" class="level2">
<h2 class="anchored" data-anchor-id="schema-support">Schema support</h2>
<p>Consistent access of tables in database schemas was planned for the “Improving DBI” project already, but I have implemented it only recently. It felt safer to see how the interface works on three backends, as opposed to implementing it for just <em>RSQLite</em> and then perhaps having to adapt it.</p>
<p>The new <code>Id()</code> function constructs identifiers. All arguments must be named, yet <em>DBI</em> doesn’t specify the argument names because DBMS have an inconsistent notion of namespaces. The objects returned by <code>Id()</code> are “dumb”, they gain meaning only when used in methods such as <code>dbQuoteIdentifier()</code> or <code>dbWriteTable()</code>.</p>
<p>For listing database objects in schemas, the new <code>dbListObjects()</code> generic can be used. It returns a data frame that contains identifiers (like those created by the <code>Id()</code> function) and a flag that indicates if the identifier is complete (i.e., pointing to a table or view) or a prefix. Incomplete identifiers can be passed to <code>dbListObjects()</code> again, which allows traversing the tree of database objects.</p>
<p>The following example assumes a schema <code>my_schema</code>. A table named <code>my_table</code> is created in this schema, objects are listed, and the table is read again.</p>
<pre><code>library(RPostgres)
pg_conn &lt;- dbConnect(Postgres())

table_name &lt;- Id(schema = "my_schema", table = "my_table")
table_name

## &lt;Id&gt; schema = my_schema, table = my_table

data &lt;- data.frame(a = 1:3, b = letters[1:3])
dbWriteTable(pg_conn, table_name, data)

dbListObjects(pg_conn)

##                               table is_prefix
## 1    &lt;Id&gt; table = geography_columns     FALSE
## 2     &lt;Id&gt; table = geometry_columns     FALSE
## 3      &lt;Id&gt; table = spatial_ref_sys     FALSE
## 4       &lt;Id&gt; table = raster_columns     FALSE
## 5     &lt;Id&gt; table = raster_overviews     FALSE
## 6             &lt;Id&gt; table = topology     FALSE
## 7                &lt;Id&gt; table = layer     FALSE
## 8                 &lt;Id&gt; table = temp     FALSE
## 9            &lt;Id&gt; schema = topology      TRUE
## 10          &lt;Id&gt; schema = my_schema      TRUE
## 11 &lt;Id&gt; schema = information_schema      TRUE
## 12         &lt;Id&gt; schema = pg_catalog      TRUE
## 13             &lt;Id&gt; schema = public      TRUE

dbListObjects(
  pg_conn,
  prefix = Id(schema = "my_schema")
)

##                                       table is_prefix
## 1 &lt;Id&gt; schema = my_schema, table = my_table     FALSE

dbReadTable(pg_conn, table_name)

##   a b
## 1 1 a
## 2 2 b
## 3 3 c</code></pre>
<p>In addition to <code>dbReadTable()</code> and <code>dbWriteTable()</code>, also <code>dbExistsTable()</code> and <code>dbRemoveTable()</code> and the new <code>dbCreateTable()</code> and <code>dbAppendTable()</code> (see below) support an <code>Id()</code> object as table name. The <code>dbQuoteIdentifier()</code> method converts these objects to SQL strings. Some operations (e.g.&nbsp;checking if a table exists) require the inverse, the new <code>dbUnquoteIdentifier()</code> generic takes care of converting valid SQL identifiers to (a list of) <code>Id()</code> objects:</p>
<pre><code>quoted &lt;- dbQuoteIdentifier(pg_conn, table_name)
quoted

## &lt;SQL&gt; "my_schema"."my_table"

dbUnquoteIdentifier(pg_conn, quoted)

## [[1]]
## &lt;Id&gt; schema = my_schema, table = my_table</code></pre>
<p>The new methods work consistently across backends - only <em>RSQLite</em> is currently restricted to the default schema. (Schemas in <em>RSQLite</em> are created by attaching another database, this use case seemed rather exotic but can be supported with the new infrastructure.)</p>
</section>
<section id="quoting-literal-values" class="level2">
<h2 class="anchored" data-anchor-id="quoting-literal-values">Quoting literal values</h2>
<p>When working on the database backends, it has become apparent that quoting strings and identifiers isn’t quite enough. Now there is a way to quote arbitrary values, that is, convert them to a string that can be pasted into an SQL query:</p>
<pre><code>library(RSQLite)
sqlite_conn &lt;- dbConnect(SQLite())

library(RMariaDB)
mariadb_conn &lt;- dbConnect(MariaDB(), dbname = "test")

dbQuoteLiteral(sqlite_conn, 1.5)

## &lt;SQL&gt; 1.5

dbQuoteLiteral(mariadb_conn, 1.5)

## &lt;SQL&gt; 1.5

dbQuoteLiteral(pg_conn, 1.5)

## &lt;SQL&gt; 1.5::float8

dbQuoteLiteral(mariadb_conn, Sys.time())

## &lt;SQL&gt; '20180501204025'

dbQuoteLiteral(pg_conn, Sys.time())

## &lt;SQL&gt; '2018-05-01 22:40:25'::timestamp</code></pre>
<p>The default implementation works for ANSI SQL compliant DBMS, the method for <em>RPostgres</em> takes advantage of the <code>::</code> casting operator as seen in the examples.</p>
</section>
<section id="more-fine-grained-creation-of-tables" class="level2">
<h2 class="anchored" data-anchor-id="more-fine-grained-creation-of-tables">More fine-grained creation of tables</h2>
<p><em>DBI</em> supports storing data frames as tables in the database via <code>dbWriteTable()</code>. This operation consists of multiple steps:</p>
<ul>
<li>Checking if a table of this name exists, if yes:
<ul>
<li>If <code>overwrite = TRUE</code>, removing the table</li>
<li>If not, throwing an error</li>
</ul></li>
<li>Creating the table with the correct field structure</li>
<li>Preparing the data for writing</li>
<li>Writing the data</li>
</ul>
<p>To reduce complexity and allow for more options without cluttering the argument list of <code>dbWriteTable()</code>, <em>DBI</em> now provides generics for the individual steps:</p>
<ul>
<li><p>The existing <code>dbRemoveTable()</code> generic has been extended with <code>temporary</code> and <code>fail_if_missing</code> arguments. Setting <code>temporary = TRUE</code> makes sure that only temporaries are removed. By default, trying to remove a table that doesn’t exist fails, setting <code>fail_if_missing = FALSE</code> changes this behavior to a silent success.</p></li>
<li><p>The new <code>dbCreateTable()</code> generic accepts a data frame or a character vector of DBMS data types and creates a table in the database. It builds upon the existing <code>sqlCreateTable()</code> generic and also supports the <code>temporary</code> argument. If a table by that name already exists, an error is raised.</p></li>
<li><p>The new <code>dbAppendTable()</code> generic uses a prepared statement (created via <code>sqlAppendTableTemplate()</code>) to efficiently insert rows into the database. This avoids the internal overhead of converting values to SQL literals.</p></li>
</ul>
<p>The following example shows the creation and population of a table with the new methods.</p>
<pre><code>table_name

## &lt;Id&gt; schema = my_schema, table = my_table

dbRemoveTable(pg_conn, table_name, fail_if_missing = FALSE)

dbCreateTable(pg_conn, table_name, c(a = "int8", b = "float8"))

dbAppendTable(pg_conn, table_name, data.frame(a = 1:3, b = 1:3))

## [1] 3

str(dbReadTable(pg_conn, table_name))

## 'data.frame':    3 obs. of  2 variables:
##  $ a:integer64 1 2 3
##  $ b: num  1 2 3</code></pre>
<p>The <code>dbWriteTable()</code> methods in the three backends have been adapted to use the new methods.</p>
</section>
<section id="support-for-64-bit-integers" class="level2">
<h2 class="anchored" data-anchor-id="support-for-64-bit-integers">Support for 64-bit integers</h2>
<p>As seen in the previous example, 64-bit integers can be read from the database. The three backends <em>RSQLite</em>, <em>RPostgres</em> and <em>RMariaDB</em> now also support writing 64-bit integers via the <em>bit64</em> package:</p>
<pre><code>data &lt;- data.frame(a = bit64::as.integer64(4:6), b = 4:6)
dbAppendTable(pg_conn, table_name, data)

## [1] 3

str(dbReadTable(pg_conn, table_name))

## 'data.frame':    6 obs. of  2 variables:
##  $ a:integer64 1 2 3 4 5 6
##  $ b: num  1 2 3 4 5 6</code></pre>
<p>Because R still lacks support for native 64-bit integers, the <em>bit64</em> package feels like the best compromise: the returned values can be computed on, or coerced to <code>integer</code>, <code>numeric</code> or even <code>character</code> depending on the application. In some cases, it may be useful to always coerce. This is where the new <code>bigint</code> argument to <code>dbConnect()</code> helps:</p>
<pre><code>pg_conn_int &lt;- dbConnect(Postgres(), bigint = "integer")
str(dbReadTable(pg_conn_int, table_name))

## 'data.frame':    6 obs. of  2 variables:
##  $ a: int  1 2 3 4 5 6
##  $ b: num  1 2 3 4 5 6

pg_conn_num &lt;- dbConnect(Postgres(), bigint = "numeric")
str(dbReadTable(pg_conn_num, table_name))

## 'data.frame':    6 obs. of  2 variables:
##  $ a: num  1 2 3 4 5 6
##  $ b: num  1 2 3 4 5 6

pg_conn_chr &lt;- dbConnect(Postgres(), bigint = "character")
str(dbReadTable(pg_conn_chr, table_name))

## 'data.frame':    6 obs. of  2 variables:
##  $ a: chr  "1" "2" "3" "4" ...
##  $ b: num  1 2 3 4 5 6</code></pre>
<p>The <code>bigint</code> argument works consistently across the three backends <em>RSQLite</em>, <em>RPostgres</em> and <em>RMariaDB</em>, the DBI specification contains a test for and a description of the requirements.</p>
</section>
<section id="geometry-columns" class="level2">
<h2 class="anchored" data-anchor-id="geometry-columns">Geometry columns</h2>
<p>PostgreSQL has support for user-defined data types, this is used e.g.&nbsp;by PostGIS to store spatial data. Before, user-defined data types were returned as character values, with a warning. Thanks to a contribution by Etienne B. Racine:</p>
<ul>
<li>the warnings are gone,</li>
<li>the user-defined data type is now stored in an attribute of the column in the data frame,</li>
<li>details on columns with user-defined data types are available in <code>dbColumnInfo()</code>.</li>
</ul>
<!-- -->
<pre><code>dbCreateTable(
  pg_conn,
  "geom_test",
  c(id = "int4", geom = "geometry(Point, 4326)")
)

data &lt;- data.frame(
  id = 1,
  geom = "SRID=4326;POINT(-71.060316 48.432044)",
  stringsAsFactors = FALSE
)
dbAppendTable(pg_conn, "geom_test", data)

## [1] 1

str(dbReadTable(pg_conn, "geom_test"))

## 'data.frame':    1 obs. of  2 variables:
##  $ id  : int 1
##  $ geom:Class 'pq_geometry'  chr "0101000020E61000003CDBA337DCC351C06D37C1374D374840"

res &lt;- dbSendQuery(pg_conn, "SELECT * FROM geom_test")
dbColumnInfo(res)

##   name      type   .oid .known .typname
## 1   id   integer     23   TRUE     int4
## 2 geom character 101529  FALSE geometry

dbClearResult(res)</code></pre>
<p>Special support for geometry columns is currently available only in <em>RPostgres</em>.</p>
</section>
<section id="duplicate-column-names" class="level2">
<h2 class="anchored" data-anchor-id="duplicate-column-names">Duplicate column names</h2>
<p>The specification has been extended to disallow duplicate, empty, or <code>NA</code> column names. The deduplication used by our three backends is similar to that used by <code>tibble::set_tidy_names()</code>, but the DBI specification does not require any particular deduplication mechanism. Syntactic names aren’t required either:</p>
<pre><code>dbGetQuery(sqlite_conn, "SELECT 1, 2, 3")

##   1 2 3
## 1 1 2 3

dbGetQuery(sqlite_conn, "SELECT 1 AS a, 2 AS a, 3 AS `a..2`")

##   a a..2 a..3
## 1 1    2    3

dbGetQuery(mariadb_conn, "SELECT 1, 2, 3")

##   1 2 3
## 1 1 2 3

dbGetQuery(mariadb_conn, "SELECT 1 AS a, 2 AS a, 3 AS `a..2`")

##   a a..2 a..3
## 1 1    2    3

dbGetQuery(pg_conn, "SELECT 1, 2, 3")

##   ?column? ?column?..2 ?column?..3
## 1        1           2           3

dbGetQuery(pg_conn, 'SELECT 1 AS a, 2 AS a, 3 AS "a..2"')

##   a a..2 a..3
## 1 1    2    3</code></pre>
</section>
<section id="helpers" class="level2">
<h2 class="anchored" data-anchor-id="helpers">Helpers</h2>
<p>Two little helper generics have been added.</p>
<p>The new <code>dbIsReadOnly()</code> generic (contributed by Anh Le) should return <code>TRUE</code> for a read-only connection. This is not part of the specification yet.</p>
<p>The <code>dbCanConnect()</code> tests a set of connection parameters. The default implementation simply connects and then disconnects upon success. For DBMS that can provide more efficient methods of checking connectivity, a lighter-weight implementation of this method may give a better experience.</p>
<p>None of the three backends currently provide specialized implementations for these generics.</p>
</section>
<section id="code-reuse" class="level2">
<h2 class="anchored" data-anchor-id="code-reuse">Code reuse</h2>
<p>I have made some efforts to extract common C++ classes for assembling data frames and prepare them for reuse. The C++ source code for the three backends contains files prefixed with <code>Db</code>, these are almost identical across the backends. The planned packaging into the <em>RKazam</em> package had to yield to higher-priority features described above.</p>
<p>The situation in the R code is similar: I have found myself copy-pasting code from one backend into another because I didn’t feel it’s ready (or standardized enough) to be included in the <em>DBI</em> package.</p>
<p>For both use cases, a code reuse strategy based on copying/updating template files or reconciling files may be more robust than the traditional importing mechanisms offered by R.</p>
</section>
<section id="outlook" class="level2">
<h2 class="anchored" data-anchor-id="outlook">Outlook</h2>
<p>The upcoming CRAN release of <em>DBI</em>, <em>DBItest</em> and the three backends <em>RSQLite</em>, <em>RMariaDB</em>, and <em>RPostgres</em> are important milestones. Stability is important when more and more users and projects use the new backends. Nevertheless, I see quite a few potential improvements that so far were out of scope of the “Improving DBI” and “Establishing DBI” projects:</p>
<ol type="1">
<li><p>Support running the test suite locally, to validate adherence to DBI for a particular installation.</p></li>
<li><p>Consistent fast data import.</p></li>
<li><p>Consistent query placeholders (currently <code>$1</code> for <em>RPostgres</em> and <code>?</code> for many other backends).</p></li>
<li><p>Support for arbitrary data types via hooks.</p></li>
<li><p>Assistance with installation problems on specific architectures, or connectivity problems with certain databases, or other specific issues.</p></li>
<li><p>Rework the internal architecture of <em>DBItest</em> to simplify locating test failures.</p></li>
<li><p>Improve the <a href="https://r-dbi.org" class="uri">https://r-dbi.org</a> website.</p></li>
<li><p>Non-blocking queries.</p></li>
</ol>
<p>I have submitted another proposal to the R Consortium, hoping to receive support with these and other issues.</p>
</section>
<section id="acknowledgments" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgments">Acknowledgments</h2>
<p>I’d like to thank the R Consortium for their generous financial support. Many thanks to the numerous contributors who helped make the past two projects a success.</p>
<p>This post appeared previously on https://r-dbi.org.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2018-05-01-dbi-2/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
</item>
<item>
  <title>Dynamic build matrix in GitHub Actions</title>
  <dc:creator>Kirill Müller</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2020-12-23-dynamic-gha/index.html</link>
  <description><![CDATA[ 



<p>I wanted to try out the new <code>fromJSON()</code> that allows dynamic build matrices in GitHub Actions for quite some time now. Today was the day.</p>
<p><a href="https://github.com/features/actions">GitHub Actions</a> allows automating build and deployment processes (CI/CD), tightly integrated with GitHub. A <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix">build matrix</a> is a way to define very similar workflows that differ only by configuration parameters. Usually, a build matrix is defined directly in the <code>.yaml</code> files together with the workflows. This blog post shows how to define these build matrices dynamically so that the “source of truth” for the matrix definition is outside the <code>.yaml</code> file.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2020-12-23-dynamic-gha/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by <a href="https://unsplash.com/photos/iar-afB0QQw" target="_blank"> Markus Spiske</a>
</figcaption>
</figure>
<p>The configuration for a workflow is a YAML file that has a context and expression syntax with very few <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions">basic functions</a>. Two very powerful functions are <code>toJSON()</code> and <code>fromJSON()</code>:</p>
<ul>
<li><code>toJSON()</code> can capture pieces of the workflow configuration as JSON and pass it to your workflow code</li>
<li><code>fromJSON()</code> allows injecting arbitrary configuration pieces created from JSON code</li>
</ul>
<p>The basic setup comprises of two jobs: one that creates the workflow definition as JSON and stores it as <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idoutputs">output</a>, and another dependent job that injects this output via <code>fromJSON()</code> into its matrix definition. A third job is defined for testing if outputs are passed correctly between jobs.</p>
<p>The <a href="https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/">original blog post</a> contains a somewhat brief description. This blog post gives a walkthrough of how I converted a static to a dynamic build matrix in the <a href="https://github.com/r-dbi/DBItest">DBItest</a> project.</p>
<section id="original-matrix" class="level2">
<h2 class="anchored" data-anchor-id="original-matrix">Original matrix</h2>
<p>In DBItest, we test the compatibility of new or updated tests with backend packages. Each backend is run in a build matrix, which is defined <a href="https://github.com/r-dbi/DBItest/blob/ccd0fb3ed5ceacd1d3347ef1cade4e450d071832/.github/workflows/backends.yaml#L30-L35">as follows</a>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backend</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strategy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fail-fast</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">package</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> duckdb</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RSQLite</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RMariaDB</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RPostgres</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> RKazam</span></span></code></pre></div>
<p>The relevant backends are defined in the <a href="https://github.com/r-dbi/DBItest/blob/ccd0fb3ed5ceacd1d3347ef1cade4e450d071832/revdep-dev/Makefile#L5"><code>Makefile</code></a>, we want to get the list from there so that we can use a single source of truth.</p>
<p>This is a very simple build matrix, ideally suited for first experiments. The techniques shown here are applicable to build matrices of any complexity and size.</p>
</section>
<section id="derive-and-verify-json" class="level2">
<h2 class="anchored" data-anchor-id="derive-and-verify-json">Derive and verify JSON</h2>
<p>Our goal is to create the <code>package:</code> section from the above matrix in JSON format. To derive the JSON format, I use the <a href="https://www.gnu.org/software/sed/manual/sed.html"><code>sed</code> stream editor</a>, my beloved hammer that I use whenever I see a text transformation task in the shell:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{ "package" : ['</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## { "package" : [</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/^REVDEP *:= */ { s///; p }"</span> revdep-dev/Makefile <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s/ /, /g'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xargs</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 1 echo <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s/^([^,]*)(,?)$/"\1"\2/'</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## "RMariaDB",</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## "RSQLite",</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## "RPostgres",</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## "RKazam",</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## "duckdb"</span></span>
<span id="cb2-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]}"</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## ]}</span></span></code></pre></div>
<p>This is not pretty, but still valid JSON when put together. We can prettify with <a href="https://stedolan.github.io/jq/"><code>jq .</code></a>, later we will use <code>jq -c .</code> to condense to a single line.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb3-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{ "package" : ['</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/^REVDEP *:= */ { s///; p }"</span> revdep-dev/Makefile <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s/ /, /g'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xargs</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 1 echo <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s/^([^,]*)(,?)$/"\1"\2/'</span></span>
<span id="cb3-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]}"</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jq</span> .</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb4-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RMariaDB"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSQLite"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPostgres"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RKazam"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span></span>
<span id="cb4-8">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>We verify the YAML version by piping to <code>json2yaml</code> which can be installed with <code>npm install json2yaml</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">package</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb5-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RMariaDB"</span></span>
<span id="cb5-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RSQLite"</span></span>
<span id="cb5-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPostgres"</span></span>
<span id="cb5-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RKazam"</span></span>
<span id="cb5-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duckdb"</span></span></code></pre></div>
<p>These tools are preinstalled on the workers. This avoids time-consuming installation procedures in this first job that needs to be run before the main jobs can even start.<sup>1</sup></p>
</section>
<section id="define-job" class="level2">
<h2 class="anchored" data-anchor-id="define-job">Define job</h2>
<p>{% raw %}</p>
<p>Once we have derived the JSON, we’re ready to define a job that creates the matrix. This must be done in the same workflow file where the matrix is defined, ideally before the main job. The job runs on <code>ubuntu-latest</code>, and also must clone the repository. In the <code>bash</code> snippet, the <code>$matrix</code> variable contains the JSON. It is shown and pretty-printed before it is provided as output via <code>echo ::set-output ...</code>.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outputs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ steps.set-matrix.outputs.matrix }}</span></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v2</span></span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> set-matrix</span></span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb6-11">          matrix=$((</span>
<span id="cb6-12">            echo '{ "package" : ['</span>
<span id="cb6-13">            sed -n "/^REVDEP *:= */ { s///; p }" revdep-dev/Makefile | sed 's/ /, /g' | xargs -n 1 echo | sed -r 's/^([^,]*)(,?)$/"\1"\2/'</span>
<span id="cb6-14">            echo " ]}"</span>
<span id="cb6-15">          ) | jq -c .)</span>
<span id="cb6-16">          echo $matrix</span>
<span id="cb6-17">          echo $matrix | jq .</span>
<span id="cb6-18">          echo "::set-output name=matrix::$matrix"</span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backend</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # Original workflow</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # ...</span></span></code></pre></div>
</section>
<section id="verify-output" class="level2">
<h2 class="anchored" data-anchor-id="verify-output">Verify output</h2>
<p>Before plugging in the generated JSON into our build job, we add another check job to verify if the generated JSON is transported correctly across job boundaries. The <code>needs: matrix</code> declares that the job must wait before the first <code>matrix</code> job succeeds. The job’s output is queried via <code>${{ needs.matrix.outputs.matrix }}</code>, the quotes ensure that <code>bash</code> processes this correctly. We install and use <code>json2yaml</code> to double-check what the YAML snippet looks like.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # job defined above</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check-matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb7-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> matrix</span></span>
<span id="cb7-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install json2yaml</span></span>
<span id="cb7-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb7-11">          sudo npm install -g json2yaml</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Check matrix definition</span></span>
<span id="cb7-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb7-15">          matrix='${{ needs.matrix.outputs.matrix }}'</span>
<span id="cb7-16">          echo $matrix</span>
<span id="cb7-17">          echo $matrix | jq .</span>
<span id="cb7-18">          echo $matrix | json2yaml</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backend</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # Original workflow</span></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # ...</span></span></code></pre></div>
<p>{% endraw %}</p>
</section>
<section id="use-output" class="level2">
<h2 class="anchored" data-anchor-id="use-output">Use output</h2>
<p>{% raw %} Finally, we’re ready to use the generated JSON as a build matrix. The workflow now uses <code>matrix: ${{fromJson(needs.matrix.outputs.matrix)}}</code> instead of the hard-coded matrix:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # see above</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check-matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # see above</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backend</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">needs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> matrix</span></span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strategy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fail-fast</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb8-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{fromJson(needs.matrix.outputs.matrix)}}</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # rest unchanged</span></span></code></pre></div>
<p>{% endraw %}</p>
<p>This gives a workflow as shown in the image below. Click on the image to view the workflow on GitHub.</p>
<a href="https://github.com/r-dbi/DBItest/actions/runs/440316185" target="_blank">
<figure class="figure">
<img alt="GitHub Actions workflow with dependencies" src="https://cynkra.com/blog/blog/posts/2020-12-23-dynamic-gha/workflow.png" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Final workflow with dynamic build matrix
</figcaption>
</figure>
</a><p><a href="https://github.com/r-dbi/DBItest/actions/runs/440316185" target="_blank"></a></p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next steps</h2>
<p>For R packages, I see two use case where dynamic matrices can be useful:</p>
<ul>
<li>Testing if package checks pass if one suggested package is not installed. Ideally, we remove suggested packages one by one and run in parallel.</li>
<li>Testing reverse dependencies. For some packages we may hit the limit of 256 jobs per workflow run. Allocating downstream packages to workers, minimizing the number of packages to be installed on each worker, sounds like an interesting optimization problem.</li>
</ul>
<p>What are your use cases for dynamic build matrices? Drop us a line at <a href="mailto:mail@cynkra.com" class="email">mail@cynkra.com</a>!</p>
</section>
<section id="caveats" class="level2">
<h2 class="anchored" data-anchor-id="caveats">Caveats</h2>
<p>Even with this simple build matrix, it took more time than I would have hoped to get the bits and pieces right. Quoting is hard. Setting up the <code>check-matrix</code> job really saves time, I wish I had done this from the start.</p>
<p>Both <code>fromJson()</code> and <code>fromJSON()</code> appear to work. The internal functions from the expression syntax seem to be case-insensitive throughout.</p>
<p>For older versions, <code>jq</code> needs to be called as <code>jq .</code> to act as a pretty-printer. For newer versions this can be omitted.</p>
<p>Today I also learned that workflows can be <a href="https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/disabling-and-enabling-a-workflow">temporarily disabled</a>. This is useful in situations where you experiment with a workflow and want to avoid running other workflows for every test.</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>You can use any tool or ecosystem you are familiar with to come up with the JSON definition. To avoid long installation times, use a specific image for your step via <a href="https://www.petefreitag.com/item/903.cfm"><code>uses: docker://...</code></a> or implement a <a href="https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-docker-container-action">container action</a>, also possible <a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsuses">in the same repository</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2020-12-23-dynamic-gha/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2020-12-23-dynamic-gha/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google Season of Docs with R: useR! Information Board</title>
  <dc:creator>Ben Ubah</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2022-01-05-gsod-user-infoboard/index.html</link>
  <description><![CDATA[ 



<p>“Google Season of Docs (GSoD) provides support for open source projects to improve their documentation and gives professional technical writers an opportunity to gain experience in open source.” (Source: <a href="https://developers.google.com/season-of-docs">Program website</a>)</p>
<p>The program makes it possible for technical writers to work closely with an open-source community they may or may not have been engaged with, to solve real problems with high-quality documentation.</p>
<figure class="figure">
<img alt="dashboard for exploring useR! conference" src="https://cynkra.com/blog/blog/posts/2022-01-05-gsod-user-infoboard/banner.png" style=" width: 100%; height: auto" class="figure-img">
</figure>
<p>In the end, an awareness of open source, of documentation and technical writing is raised, while participating open source organizations benefit from an improvement in their documentation. The R Project participated in GSoD as an open-source organization for the first time this year after several years of participating in <a href="https://r-community.org/gsoc/">Google Summer of Code (GSoC)</a>, another open-source program focused on coding.</p>
<section id="the-user-conference" class="level2">
<h2 class="anchored" data-anchor-id="the-user-conference">The useR! conference</h2>
<p>useR! is the main annual conference for the R user and developer community that is organized by a community of volunteers and supported by the R Foundation. It is organized by a different team of community organizers each year and has been held since 2004. The useR! conference program consists of both invited and user-contributed presentations in addition to tutorials and other social events.</p>
<p>With so much historical information about useR! scattered around Git repositories, useR! websites, and organizers’ hard-disks, the R Project proposed to organize useR! documentation with two outputs- an information board and a knowledgebase. The knowledgebase was proposed to take the form of an online book, inspired by examples such as the <a href="https://knowledgebase.satrdays.org/">satRdays knowledgebase</a>. The information board was proposed as a dashboard to interactively browse historical information. These two projects were carried on concurrently over a span of 6 months (May - November, 2021) during which my primary responsibility as a technical writer was to curate historical useR! conference data and develop the information board with this data.</p>
</section>
<section id="the-information-board" class="level2">
<h2 class="anchored" data-anchor-id="the-information-board">The Information board</h2>
<p>Why an information board?</p>
<p>After participating in useR! 2021 as a part of the organizing committee, I identified several gaps within the organizational process that an information board could fill up. Organizers spend a lot of time looking for information from past useR! conference websites, past organizers, and other archives of un-structured or semi-structured data. This process repeats each year for every useR! conference and this seems to put a burden on past organizers or co-ordinators to continuously provide information to future organizers.</p>
<p>To fill in these gaps, I proposed to: - gather data in a structured format for at least the past six useR! conferences - build a dashboard using this data-set - structure things in such a way that updating the data files leads to an updated dashboard after a rebuild process</p>
<p>The final product could be found by accessing the following URL: <a href="https://bit.ly/infoboard-cynkra">https://bit.ly/infoboard-cynkra</a></p>
</section>
<section id="use-cases" class="level2">
<h2 class="anchored" data-anchor-id="use-cases">Use cases</h2>
<p>A typical useR! conference program consists of keynotes, regular talks, lightning talks, poster sessions, tutorials and social events. The organizing team for each conference would need to identify keynote speakers, select talks and tutorials, and determine which social events to offer. In addition to those, the organizing team would need to set up partnerships for the conference - sponsors (that can contribute in different ways) and partner organizations. To prospective organizers who have never organized useR! or a conference of such capacity, it is burdensome to sift through 15+ past useR! websites to search out the type of tutorials that have been offered in the past, the number of keynote presentations to offer and around what topics, or what kind of social events to host.</p>
<p>It is difficult to ascertain if a talk has been presented in a useR! in the past without access to structured and filterable historical data.</p>
<p>Furthermore, with diversity and inclusion in mind, it could be difficult to determine presenters that have already presented many times before (perhaps on a similar topic) and those from under-represented groups that have only had a few chances to present talks at a useR!</p>
<p>For organizers to target sponsors who are interested in R and who may have sponsored in the past within the location of the conference is hard without data-driven assistance. For potential sponsors, it provides some insight into the scope and reach of useR! conferences.</p>
<p>For entities like the R Foundation, R Consortium and R Forwards, the information board provides an easy way to gain insights into the history of useR! while planning for the future in a global and diverse context.</p>
<p>Other conferences beyond useR! could benefit from the information board as it provides organized data around people, organizations, and presentations that could be helpful in planning local and regional R events.</p>
</section>
<section id="tools" class="level2">
<h2 class="anchored" data-anchor-id="tools">Tools</h2>
<p>I used <code>flexdashboard</code> for the structure and layout of the dashboard, <code>echarts4r</code> for charts, and <code>reactable</code> for interactive tables.</p>
</section>
<section id="technical-information" class="level2">
<h2 class="anchored" data-anchor-id="technical-information">Technical information</h2>
<p>The source for this dashboard lives in a <a href="https://gitlab.com/rconf/userinfoboard/">GitLab repository</a> where <a href="https://gitlab.com/rconf/userinfoboard/-/issues">issues</a> or <a href="https://gitlab.com/rconf/userinfoboard/-/merge_requests">merge requests</a> can be raised.</p>
<p>All the data are located in the <a href="https://gitlab.com/rconf/userinfoboard/-/tree/master/data">data directory</a> and a description of the years which each dataset covers.</p>
<p>The charts and tables are produced from scripts in the <a href="https://gitlab.com/rconf/userinfoboard/-/tree/master/R">R directory</a> - hopefully making it easier to reproduce them or use them in other contexts.</p>
<p>The sidebar menu, footer and JavaScript codes are saved as HTML fragments that are included via the YAML header of the <code>index.Rmd</code> file.</p>
</section>
<section id="license" class="level2">
<h2 class="anchored" data-anchor-id="license">License</h2>
<p>The data is available for download under a CC BY 4.0 license, while the R code is available under a GPL-3.0 license.</p>
</section>
<section id="technical-writing-experience" class="level2">
<h2 class="anchored" data-anchor-id="technical-writing-experience">Technical Writing experience</h2>
<p>Having written R articles for <a href="https://opendatascience.com/tag/r-trends/">Open Data Science</a> in the past, the experience gained from this GSoD project improved my technical writing and project management skills. In a collaborative sense: I received and implemented feedback several times a month from different volunteers across several timezones, while working to produce the deliverable per project-phase and covering the general scope of the project.</p>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>This project would not have been possible at this time without support from Google via the GSoD program. Much appreciation goes to the GSoD admins for the R Project - Heather Turner and Matt Bannert - who did a lot of admin work from the proposal to the final report. I also appreciate Noa Tamir, who excellently managed the week-to-week supervision of this work. I appreciate the help I received from several volunteers on this project including past organizers who provided data from their archives.</p>
<p>Finally, cynkra is passionate about open-source and the R community, and this has provided an enabling environment for this project to succeed and to continue succeeding.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2022-01-05-gsod-user-infoboard/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2022-01-05-gsod-user-infoboard/banner.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>Introducing dm: easy juggling of tables and relations</title>
  <dc:creator>Balthasar Sager</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2019-07-17-dm/index.html</link>
  <description><![CDATA[ 



<p>The <a href="https://krlmlr.github.io/dm/">dm</a> package reduces your mental strain when working with many tables. It connects your data, while still keeping them in their original tables. You can easily perform operations on all tables, visualize how they’re connected, and integrate databases.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2019-07-17-dm/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Tobias Fischer
</figcaption>
</figure>
<p><br></p>
<p>Rather than writing out the relational structure in code while connecting the sources, <a href="https://krlmlr.github.io/dm/">dm</a> packages them in data. This workflow prevents you from inconsistently updating tables, making copies due to redundancies and, more generally, losing track of decisions made in a data pipeline.</p>
<section id="a-case-study" class="level3">
<h3 class="anchored" data-anchor-id="a-case-study">A case study</h3>
<p>To demonstrate <a href="https://krlmlr.github.io/dm/">dm</a>’s benefits, let’s compare some workflows using data from the <a href="https://github.com/hadley/nycflights13">nycflights13</a> package.</p>
<p>We want to get the data to analyze arrival delays of flights of planes built more than 30 years ago. For these flights, we also want to check if they departed for destinations in the south. We use methods from the <a href="https://dplyr.tidyverse.org/">dplyr</a> package, the grammar for data manipulation from the <a href="https://www.tidyverse.org/">tidyverse</a>.</p>
<p>This requires columns <code>lon</code> (longitude) from table <code>airports</code>, <code>year</code> from table <code>planes</code> and <code>arr_delay</code> (arrival delay) from <code>flights</code>. We can do this by performing multiple joins, one after another, as you might be used to:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(nycflights13)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">planes_join <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> planes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">production_year_plane =</span> year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(flights, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tailnum"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(airports, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dest"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"faa"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(lon, year, production_year_plane, dest)</span>
<span id="cb2-6"></span>
<span id="cb2-7">planes_join <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(production_year_plane <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1983</span>)</span></code></pre></div>
<pre><code>## # A tibble: 1,432 x 4
##      lon  year production_year_plane dest
##    &lt;dbl&gt; &lt;int&gt;                 &lt;int&gt; &lt;chr&gt;
##  1 -95.3  2013                  1965 IAH
##  2 -95.3  2013                  1965 IAH
##  3 -95.3  2013                  1965 IAH
##  4 -95.3  2013                  1965 IAH
##  5 -87.9  2013                  1959 ORD
##  6 -97.0  2013                  1959 DFW
##  7 -97.0  2013                  1959 DFW
##  8 -97.0  2013                  1959 DFW
##  9 -90.4  2013                  1959 STL
## 10 -97.0  2013                  1959 DFW
## # … with 1,422 more rows</code></pre>
<p>Fair enough, you might say — to keep an overview, we can reduce the 34 columns using <code>select()</code>, then <code>filter()</code>. But what do you do once there are 30 tables, possibly from databases you’re working with? Is this still a workable solution? And how sure are we that we truly only need these three columns?</p>
</section>
<section id="dm" class="level3">
<h3 class="anchored" data-anchor-id="dm">dm</h3>
<p>On your <a href="https://krlmlr.github.io/dm/">dm</a> object, you can directly apply operations like <code>filter()</code> to <em>all</em> your tables! How so? Because relations between the objects are already registered in the <a href="https://krlmlr.github.io/dm/">dm</a> object, you don’t need to indicate them.</p>
<p>Not having to state how tables are connected each time you perform a join may make exploratory work a lot easier:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dm)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_nycflights13</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_filter</span>(planes, year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1983</span>)</span></code></pre></div>
<pre><code>## ── Table source ───────────────────────────────────────────────────────────
## src:  &lt;package: nycflights13&gt;
## ── Data model ─────────────────────────────────────────────────────────────
## Data model object:
##   5 tables:  airlines, airports, flights, planes ...
##   53 columns
##   3 primary keys
##   3 references
## ── Rows ───────────────────────────────────────────────────────────────────
## Total: 27583
## airlines: 4, airports: 3, flights: 1432, planes: 29, weather: 26115</code></pre>
<p>This produces an overview of your data sources — all tables still separated. Also note: there was no need to <code>rename()</code> the column <code>year</code>, and all tables stay separate.</p>
<p>What if you still wanted to produce a join and check where those flights departed to? Voilà:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_nycflights13</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_filter</span>(planes, year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1983</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_join_tbl</span>(flights, airports)</span></code></pre></div>
<pre><code>## # A tibble: 1,432 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      839            850       -11     1027
##  2  2013     1     1      858            900        -2     1102
##  3  2013     1     1     1219           1220        -1     1415
##  4  2013     1     1     1317           1325        -8     1454
##  5  2013     1     1     1422           1410        12     1613
##  6  2013     1     1     1806           1810        -4     2002
##  7  2013     1     1     1911           1910         1     2050
##  8  2013     1     1     2030           2045       -15     2150
##  9  2013     1     2      535            540        -5      831
## 10  2013     1     2      945            945         0     1113
## # … with 1,422 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
</section>
<section id="visualization" class="level3">
<h3 class="anchored" data-anchor-id="visualization">Visualization</h3>
<p>You can easily gain a visual overview using <code>cdm_draw()</code>. This results in pretty, customizable (using <code>cdm_set_colors()</code>) visualizations of how your data connect.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_nycflights13</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_set_colors</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">flights =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue_nb"</span>,</span>
<span id="cb8-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airlines =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange_nb"</span>,</span>
<span id="cb8-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weather =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green_nb"</span>,</span>
<span id="cb8-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">airports =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow_nb"</span>,</span>
<span id="cb8-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">planes =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light_grey_nb"</span></span>
<span id="cb8-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cdm_draw</span>()</span></code></pre></div>
<p><img alt="Data model" src="https://cynkra.com/blog/blog/posts/2019-07-17-dm/datamodelr.png" style="height: auto; width: 50%;"></p>
</section>
<section id="databases" class="level3">
<h3 class="anchored" data-anchor-id="databases">Databases</h3>
<p><a href="https://krlmlr.github.io/dm/">dm</a> works for both in-memory data and databases. You can easily integrate it into your <a href="https://dbplyr.tidyverse.org/">dbplyr</a> workflow, making for new, powerful ways of analysis.</p>
</section>
<section id="feedback" class="level3">
<h3 class="anchored" data-anchor-id="feedback">Feedback</h3>
<p>This was just a short glimpse of what <a href="https://krlmlr.github.io/dm/">dm</a> can do — more posts will follow. Feel free to contribute to this package on <a href="https://github.com/krlmlr/dm">Github</a>. Funding for <a href="https://krlmlr.github.io/dm/">dm</a> is generously provided by <a href="https://www.energie360.ch/de/private/">Energie360</a> and <a href="https://www.cynkra.com">cynkra</a>. This package is authored by <a href="https://github.com/TSchiefer">Tobias Schieferdecker</a> and <a href="https://github.com/krlmlr">Kirill Müller</a>.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2019-07-17-dm/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2019-07-17-dm/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Maintaining multiple identities with Git</title>
  <dc:creator>Kirill Müller</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2020-08-25-git-multiple-identities/index.html</link>
  <description><![CDATA[ 



<p>When committing to a Git repository related to my consulting work, I must use my company e-mail address, kirill@cynkra.com. Not so much for my open-source work – for this, I prefer to use other e-mail addresses, like krlmlr+r@mailbox.org . (For example, Travis CI sends notification e-mails to the committer’s e-mail address, and I have set up filtering for that other address.)</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2020-08-25-git-multiple-identities/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Carson Arias
</figcaption>
</figure>
<p><br></p>
<p>Having to configure the e-mail address for each repository separately eventually gets annoying. Instead, I’d rather have all repos within a specific subdirectory use particular e-mail address.</p>
<p>All my Git repos live in <code>~/git</code>. Subdirectories <code>R</code> and <code>cynkra</code>, contain R packages and repos related to consulting, respectively. To achieve the desired setup, I edit my <code>~/.gitconfig</code> with the following entry:</p>
<pre><code>[includeIf "gitdir:git/**"]
    path = git/.gitconfig</code></pre>
<p>This ensures that all repos in the <code>git</code> directory use the <code>git/.gitconfig</code> file in addition to the main configuration. That file contains the following:</p>
<pre><code>[includeIf "gitdir:R/**"]
    path = R/.gitconfig
[includeIf "gitdir:cynkra/**"]
    path = cynkra/.gitconfig</code></pre>
<p>Finally, in <code>~/git/R/.gitconfig</code> and <code>~/git/cynkra/.gitconfig</code>, I configure the e-mail addresses I want to use for all repos pertaining to <code>R</code> and <code>cynkra</code>, respectively.</p>
<pre><code>[user]
    email = ...</code></pre>
<p>I verify the setup with <code>git config -l | grep user</code>. Indeed, cynkra repos use the cynkra e-mail address. Voilà!</p>
<p>The above approach requires a recent-ish version of <code>git</code>- version 2.14 or later should suffice. Read more about <a href="https://git-scm.com/docs/git-config#_conditional_includes">conditional includes</a>.</p>



 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2020-08-25-git-multiple-identities/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2020-08-25-git-multiple-identities/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Relational data models in R</title>
  <dc:creator>Angel D&#39;az, Kirill Müller</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2020-04-02-dm/index.html</link>
  <description><![CDATA[ 



<p>Relational databases are powerful tools for analyzing and manipulating data. However, many modeling workflows require a great deal of time and effort to wrangle data from databases to place it into a flat data frame or table format. Only then the actual data analysis can start.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2020-04-02-dm/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Jordan McDonald
</figcaption>
</figure>
<p><br></p>
<section id="why-a-relational-model" class="level2">
<h2 class="anchored" data-anchor-id="why-a-relational-model">Why a relational model?</h2>
<p>With the proper tools, analysis can begin using a relational model that works directly with the database. And, if wrangling is still required, R users can leverage this powerful and proven SQL approach to data organization and manipulation.</p>
<p>The <a href="https://krlmlr.github.io/dm">dm package</a> takes the primary advantage of databases – relational modeling – and brings it to R. In relational databases, tables or data frames link through <a href="https://krlmlr.github.io/dm/articles/howto-dm-theory.html#pk">primary keys (PK)</a> and <a href="https://krlmlr.github.io/dm/articles/howto-dm-theory.html#fk">foreign keys (FK)</a>. Instead of having a single, wide table to work with, data is segmented across multiple tables to eliminate or reduce redundancies. This process is called normalization. A classic example is storing unique identifiers in a large table and looking up values for these unique identifiers in a small data frame. This approach lets an analysis run without reading or writing look-up values until necessary because unique identifiers are enough for most of the runtime.</p>
<p>dm 0.1.1 is available on <a href="https://cran.r-project.org/package=dm">CRAN</a>. You can now download and install dm, from CRAN, with the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dm"</span>)</span></code></pre></div>
</section>
<section id="connect-to-a-database" class="level2">
<h2 class="anchored" data-anchor-id="connect-to-a-database">Connect to a database</h2>
<p>We connect to a <a href="https://relational.fit.cvut.cz/">relational dataset repository</a> with a database server that is publicly accessible without registration. There is a <a href="https://relational.fit.cvut.cz/dataset/Financial">financial dataset</a> that contains loan data, along with relevant information and transactions. We chose this loan dataset because the relationships between <code>loan</code>, <code>account</code>, and <code>transcactions</code> tables are good representations of databases that record real-world business transactions.</p>
<p>The dataset page lists the credentials required for connecting to the database:</p>
<ul>
<li>hostname: relational.fit.cvut.cz</li>
<li>port: 3306</li>
<li>username: <code>guest</code></li>
<li>password: <code>relational</code></li>
<li>database: <code>Financial_ijs</code></li>
</ul>
<p>These can be used, for example, in MySQL Workbench to download the CSV data manually. To automate and keep the data in the database for as long as possible, we can connect to the database from R through its <a href="https://www.r-dbi.org/">database interface</a> to access the tables:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RMariaDB)</span>
<span id="cb2-2">my_db <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MariaDB</span>(),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'guest'</span>,</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relational'</span>,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Financial_ijs'</span>,</span>
<span id="cb2-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relational.fit.cvut.cz'</span></span>
<span id="cb2-8">)</span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbListTables</span>(my_db)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "accounts"  "cards"     "clients"   "disps"     "districts" "loans"</span></span>
<span id="cb2-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "orders"    "tkeys"     "trans"</span></span></code></pre></div>
<p>By creating a dm object from the connection, we get access to all tables:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dm)</span>
<span id="cb3-2">my_dm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_from_src</span>(my_db)</span>
<span id="cb3-3"></span>
<span id="cb3-4">my_dm</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ── Table source ────────────────────────────────────────────────────────────────</span></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## src:  mysql  [guest@relational.fit.cvut.cz:NA/Financial_ijs]</span></span>
<span id="cb3-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ── Metadata ────────────────────────────────────────────────────────────────────</span></span>
<span id="cb3-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Tables: `accounts`, `cards`, `clients`, `disps`, `districts`, … (9 total)</span></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Columns: 57</span></span>
<span id="cb3-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Primary keys: 0</span></span>
<span id="cb3-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Foreign keys: 0</span></span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(my_dm)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] "accounts"  "cards"     "clients"   "disps"     "districts" "loans"</span></span>
<span id="cb4-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [7] "orders"    "tkeys"     "trans"</span></span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">my_dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>accounts</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Source:   table&lt;accounts&gt; [?? x 4]</span></span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Database: mysql [guest@relational.fit.cvut.cz:NA/Financial_ijs]</span></span>
<span id="cb5-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      id district_id frequency        date</span></span>
<span id="cb5-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt;       &lt;int&gt; &lt;chr&gt;            &lt;date&gt;</span></span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     1          18 POPLATEK MESICNE 1995-03-24</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     2           1 POPLATEK MESICNE 1993-02-26</span></span>
<span id="cb5-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     3           5 POPLATEK MESICNE 1997-07-07</span></span>
<span id="cb5-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     4          12 POPLATEK MESICNE 1996-02-21</span></span>
<span id="cb5-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     5          15 POPLATEK MESICNE 1997-05-30</span></span>
<span id="cb5-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6     6          51 POPLATEK MESICNE 1994-09-27</span></span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # … with more rows</span></span></code></pre></div>
<p>The components of this particular dm object are lazy tables powered by <a href="https://dbplyr.tidyverse.org/">dbplyr</a>. This package translates the <a href="https://dplyr.tidyverse.org/">dplyr</a> grammar of data manipulation into queries the database server understands. The advantage to a lazy table is that there is no data download until results are collected for printing or local processing. Below, the summary operation is computed on the database, and only the results are sent back to the R session.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb6-2">my_dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>accounts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(district_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Source:   lazy query [?? x 2]</span></span>
<span id="cb6-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Database: mysql [guest@relational.fit.cvut.cz:NA/Financial_ijs]</span></span>
<span id="cb6-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   district_id n</span></span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         &lt;int&gt; &lt;int64&gt;</span></span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1           1 554</span></span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2           2  42</span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3           3  50</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4           4  48</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5           5  65</span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6           6  48</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # … with more rows</span></span></code></pre></div>
<p>If the data fits into your RAM, a database connection is not <em>required</em> to use dm. The <code>collect()</code> command downloads all tables for our dm object.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">my_local_dm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb7-2">  my_dm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">collect</span>()</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(my_local_dm)</span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 77922024 bytes</span></span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">my_local_dm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>accounts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(district_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 77 x 2</span></span>
<span id="cb8-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   district_id     n</span></span>
<span id="cb8-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         &lt;int&gt; &lt;int&gt;</span></span>
<span id="cb8-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1           1   554</span></span>
<span id="cb8-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2           2    42</span></span>
<span id="cb8-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3           3    50</span></span>
<span id="cb8-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4           4    48</span></span>
<span id="cb8-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5           5    65</span></span>
<span id="cb8-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6           6    48</span></span>
<span id="cb8-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # … with 71 more rows</span></span></code></pre></div>
<p>A dm object can also be created from individual data frames with the <code>dm()</code> function.</p>
</section>
<section id="define-primary-and-foreign-keys" class="level2">
<h2 class="anchored" data-anchor-id="define-primary-and-foreign-keys">Define primary and foreign keys</h2>
<p>Relational database tables link to each other via primary and foreign keys. The <a href="https://relational.fit.cvut.cz/assets/img/datasets-generated/financial.svg">model diagram</a> provided by our test database illustrates the intended relationships.</p>
<p>However, it turns out this is not an accurate representation of the entities and relationships within the database:</p>
<ul>
<li>Table names in our database have the plural form; in the diagram it’s singular.</li>
<li>There is a <code>tkeys</code> table available in the database that is not listed in the model diagram.</li>
<li>The <code>Financial_std</code> database is similar, but different from the one that we work with, <code>Financial_ijs</code>.</li>
</ul>
<p>Bearing these discrepancies in mind, we can define suitable primary and foreign keys for our dm object. The documentation suggests that the <code>loans</code> table is the most important one. We color the target table separately with <code>dm_color()</code>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Defining PKs and FKs</span></span>
<span id="cb9-2">my_dm_keys <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb9-3">  my_local_dm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(districts, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(accounts, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(clients, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(loans, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(orders, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(trans, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(disps, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_pk</span>(cards, id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(loans, account_id, accounts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(orders, account_id, accounts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(trans, account_id, accounts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(disps, account_id, accounts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(disps, client_id, clients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(accounts, district_id, districts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_add_fk</span>(cards, disp_id, disps) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_set_colors</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">green =</span> loans)</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the visual model</span></span>
<span id="cb9-22">my_dm_keys <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_draw</span>()</span></code></pre></div>
<p><img alt="Data model" src="https://cynkra.com/blog/blog/posts/2020-04-02-dm/dm_draw.png" style="height: auto; width: 60%;"></p>
<p>The discrepancies highlight the importance of being able to define primary and foreign keys. Most of the challenges in manipulating data are not syntax knowledge gaps. The syntax can always be looked up with search engines. Knowledge gaps regarding how data is organized are much more common as stumbling blocks for R users when working with distributed data.</p>
<p>Insight into the structure of a database using the built-in <code>dm_draw()</code> function provides an instant efficiency boost. Combined with defining unique identifiers (primary keys) and how they are found by other tables (foreign keys), an R user can quickly clarify the structures with which they are working.</p>
<p>To assist with this process of defining the structure, dm comes with a built-in helper to check the referential integrity of the dataset:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">my_dm_keys <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_examine_constraints</span>()</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ℹ All constraints satisfied.</span></span></code></pre></div>
</section>
<section id="create-a-dataset-ready-for-analysis" class="level2">
<h2 class="anchored" data-anchor-id="create-a-dataset-ready-for-analysis">Create a dataset ready for analysis</h2>
<p>For modeling, a flat table or matrix is required as input. If normalization is the process of splitting up a table to reduce redundancies, joining multiple tables together is called denormalizing.</p>
<p>The <code>dm_squash_to_tbl()</code> function creates a denormalized table by performing a cascading join between <code>cards</code> and all outgoing foreign keys. A <code>join</code> is the SQL term for combining some or all of the unique columns between 2 or more tables into a single table using the appropriate keys. In this case, the <code>cards</code> table has a foreign key to <code>disps</code> table, which has a foreign key to <code>accounts</code>, which also has a foreign key to the <code>districts</code> table. These foreign key relationships are then used in a cascading join within the <code>dm_squash_to_tbl()</code> function, without having to specify the relationships because they are already encoded within the <code>dm</code> object.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">my_dm_keys <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_squash_to_tbl</span>(cards)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Renamed columns:</span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * type -&gt; cards$cards.type, disps$disps.type</span></span>
<span id="cb11-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## * district_id -&gt; accounts$accounts.district_id, clients$clients.district_id</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 892 x 28</span></span>
<span id="cb11-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      id disp_id cards.type issued     client_id account_id disps.type</span></span>
<span id="cb11-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;int&gt;   &lt;int&gt; &lt;chr&gt;      &lt;date&gt;         &lt;int&gt;      &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1     1       9 gold       1998-10-16         9          7 OWNER</span></span>
<span id="cb11-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2     2      19 classic    1998-03-13        19         14 OWNER</span></span>
<span id="cb11-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3     3      41 gold       1995-09-03        41         33 OWNER</span></span>
<span id="cb11-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4     4      42 classic    1998-11-26        42         34 OWNER</span></span>
<span id="cb11-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5     5      51 junior     1995-04-24        51         43 OWNER</span></span>
<span id="cb11-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6     7      56 classic    1998-06-11        56         48 OWNER</span></span>
<span id="cb11-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # … with 886 more rows, and 21 more variables: accounts.district_id &lt;int&gt;,</span></span>
<span id="cb11-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   frequency &lt;chr&gt;, date &lt;date&gt;, A2 &lt;chr&gt;, A3 &lt;chr&gt;, A4 &lt;int&gt;, A5 &lt;int&gt;,</span></span>
<span id="cb11-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   A6 &lt;int&gt;, A7 &lt;int&gt;, A8 &lt;int&gt;, A9 &lt;int&gt;, A10 &lt;dbl&gt;, A11 &lt;int&gt;, A12 &lt;dbl&gt;,</span></span>
<span id="cb11-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   A13 &lt;dbl&gt;, A14 &lt;int&gt;, A15 &lt;int&gt;, A16 &lt;int&gt;, birth_number &lt;chr&gt;,</span></span>
<span id="cb11-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   clients.district_id &lt;int&gt;, tkey_id &lt;int&gt;</span></span></code></pre></div>
<p>We have an analysis-ready dataset available to use!</p>
</section>
<section id="transform-data-in-a-dm" class="level2">
<h2 class="anchored" data-anchor-id="transform-data-in-a-dm">Transform data in a dm</h2>
<p>Data transformation in dm is done by zooming on the table with which you would like to work. A zoomed dm supports dplyr operations on the zoomed table: simple transformations, grouped operations, joins, and more.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">my_dm_keys <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dm_zoom_to</span>(accounts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(district_id) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(districts)</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # Zoomed table: accounts</span></span>
<span id="cb12-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble:     77 x 17</span></span>
<span id="cb12-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   district_id     n A2    A3        A4    A5    A6    A7    A8    A9   A10   A11</span></span>
<span id="cb12-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt;</span></span>
<span id="cb12-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1           1   554 Hl.m… Prag… 1.20e6     0     0     0     1     1   100 12541</span></span>
<span id="cb12-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2           2    42 Bene… cent… 8.89e4    80    26     6     2     5    47  8507</span></span>
<span id="cb12-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3           3    50 Bero… cent… 7.52e4    55    26     4     1     5    42  8980</span></span>
<span id="cb12-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4           4    48 Klad… cent… 1.50e5    63    29     6     2     6    67  9753</span></span>
<span id="cb12-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5           5    65 Kolin cent… 9.56e4    65    30     4     1     6    51  9307</span></span>
<span id="cb12-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6           6    48 Kutn… cent… 7.80e4    60    23     4     2     4    52  8546</span></span>
<span id="cb12-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # … with 71 more rows, and 5 more variables: A12 &lt;dbl&gt;, A13 &lt;dbl&gt;, A14 &lt;int&gt;,</span></span>
<span id="cb12-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## #   A15 &lt;int&gt;, A16 &lt;int&gt;</span></span></code></pre></div>
<p>The columns used by <code>left_join()</code> to consolidate tables are inferred from the primary and foreign keys already encoded within the <code>dm</code> object.</p>
</section>
<section id="reproducible-dataflows-with-dm" class="level2">
<h2 class="anchored" data-anchor-id="reproducible-dataflows-with-dm">Reproducible dataflows with dm</h2>
<p>Walking through dm’s data modeling fundamentals, adding keys, and drawing the structure, will help R users better understand data from external databases or apply best practices from relational data modeling to their local data.</p>
<p>You can immediately start testing on an <a href="https://rstudio.cloud/project/523482">Rstudio cloud</a> instance! For more examples and explanations, check out the <a href="https://krlmlr.github.io/dm">documentation page</a>. Install this package today!</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2020-04-02-dm/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2020-04-02-dm/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Running old versions of TeXlive with tinytex</title>
  <dc:creator>Kirill Müller</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2021-10-07-old-texlive/index.html</link>
  <description><![CDATA[ 



<p>Rendering PDFs with <a href="https://pkgs.rstudio.com/rmarkdown/">rmarkdown</a> requires a working LaTeX installation, such as <a href="https://yihui.org/tinytex/">tinytex</a>. Occasionally, existing workflows break with the newest version of LaTeX. This post describes how to run an older LaTeX version for just a little while.</p>
<figure class="figure">
<img alt="Old typewriter has typed the word 'Update' on paper" src="https://cynkra.com/blog/blog/posts/2021-10-07-old-texlive/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Markus Winkler
</figcaption>
</figure>
<p>Rendering PDFs with <a href="https://pkgs.rstudio.com/rmarkdown/">rmarkdown</a> requires a working LaTeX installation. The excellent <a href="https://yihui.org/tinytex/">tinytex</a> package helps installing a portable variant of the TeXlive distribution with minimal fuss, on any major operating system. It is really as simple as:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">tinytex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_tinytex</span>()</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb2-1">trying URL 'https://yihui.org/tinytex/TinyTeX-1.tgz'</span>
<span id="cb2-2">Content type 'application/octet-stream' length 87001665 bytes (83.0 MB)</span></code></pre></div>
<section id="breaking-changes-in-latex" class="level2">
<h2 class="anchored" data-anchor-id="breaking-changes-in-latex">Breaking changes in LaTeX?</h2>
<p>Despite its age, LaTeX is still a lively maintained and evolving system, with the consequence that some documents that worked on an older version of LaTeX may no longer work with the most recent stack. One such example is the <a href="https://ctan.org/pkg/tabu?lang=en">tabu package</a> that <a href="https://github.com/haozhu233/kableExtra/issues/625">breaks for some use cases</a> with TeXlive 2021.</p>
<p>On a clean tinytex installation, rendering an <code>.rmd</code> document with the following code starts with installing missing packages:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(mtcars, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">booktabs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">longtable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-2">  kableExtra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb4-1">tlmgr: package repository https://mirror.foobar.to/CTAN/systems/texlive/tlnet (not verified: gpg unavailable)</span>
<span id="cb4-2">[1/1, ??:??/??:??] install: multirow [3k]</span>
<span id="cb4-3">running mktexlsr ...</span>
<span id="cb4-4">done running mktexlsr.</span>
<span id="cb4-5">tlmgr: package log updated: ~/Library/TinyTeX/texmf-var/web2c/tlmgr.log</span>
<span id="cb4-6">tlmgr: command log updated: ~/Library/TinyTeX/texmf-var/web2c/tlmgr-commands.log</span>
<span id="cb4-7">tlmgr: package repository https://mirror.foobar.to/CTAN/systems/texlive/tlnet (not verified: gpg unavailable)</span>
<span id="cb4-8">[1/1, ??:??/??:??] install: wrapfig [10k]</span>
<span id="cb4-9">running mktexlsr ...</span>
<span id="cb4-10">...</span></code></pre></div>
<p>Yes, missing packages are installed on the fly! A full LaTeX distribution has several GB in size. The lazy package installation is a cool feature of the tinytex distribution that allows starting quickly with a minimal installation, without downloading and unpacking the whole thing.</p>
<p>However, compilation gives the following error message:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb5-1">tlmgr: package log updated: ~/Library/TinyTeX/texmf-var/web2c/tlmgr.log</span>
<span id="cb5-2">tlmgr: command log updated: ~/Library/TinyTeX/texmf-var/web2c/tlmgr-commands.log</span>
<span id="cb5-3">! Dimension too large.</span>
<span id="cb5-4">\LT@max@sel #1#2-&gt;{\ifdim #2=\wd \tw@</span>
<span id="cb5-5">                                      #1\else \number \c@LT@chunks \fi }{\th...</span>
<span id="cb5-6">l.317 \end{longtabu}</span>
<span id="cb5-7"></span>
<span id="cb5-8">Error: LaTeX failed to compile test.tex. See https://yihui.org/tinytex/r/#debugging for debugging tips. See test.log for more info.</span></code></pre></div>
</section>
<section id="what-if-we-switch-to-the-previous-version" class="level2">
<h2 class="anchored" data-anchor-id="what-if-we-switch-to-the-previous-version">What if we switch to the previous version?</h2>
<p>“But it used to work yesterday!” Fine, let’s install the last version that is still based on TeXlive 2020:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">tinytex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_tinytex</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021.03"</span>)</span></code></pre></div>
<p>Unfortunately, this breaks the package downloader:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb7-1">A new version of TeX Live has been released. If you need to install or update any LaTeX packages, you have to upgrade TinyTeX with tinytex::reinstall_tinytex(). If it fails to upgrade, you might be using a default random CTAN mirror that has not been fully synced to the main CTAN repository, and you need to wait for a few more days or use a CTAN mirror that is known to be up-to-date (see the "repository" argument on the help page ?tinytex::install_tinytex).</span>
<span id="cb7-2"></span>
<span id="cb7-3">tlmgr: Local TeX Live (2020) is older than remote repository (2021).</span>
<span id="cb7-4">Cross release updates are only supported with</span>
<span id="cb7-5">  update-tlmgr-latest(.sh/.exe) --update</span>
<span id="cb7-6">See https://tug.org/texlive/upgrade.html for details.</span>
<span id="cb7-7">! LaTeX Error: File `multirow.sty' not found.</span>
<span id="cb7-8">...</span></code></pre></div>
<p>And we’re told to upgrade TeXlive, which isn’t helpful in our particular use case.</p>
</section>
<section id="can-we-make-the-previous-version-work" class="level2">
<h2 class="anchored" data-anchor-id="can-we-make-the-previous-version-work">Can we make the previous version work?</h2>
<p>Yes. The solution is to teach tinytex to make do with a historic snapshot of the TeXlive distribution:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">tinytex<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tlmgr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"option repository https://ftp.tu-chemnitz.de/pub/tug/historic/systems/texlive/2020/tlnet-final"</span>)</span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb9-1">tlmgr: setting default package repository to https://ftp.tu-chemnitz.de/pub/tug/historic/systems/texlive/2020/tlnet-final</span>
<span id="cb9-2">tlmgr: updating ~/Library/TinyTeX/tlpkg/texlive.tlpdb</span></code></pre></div>
<p>After that, automatic package downloads work again, with a prominent message reminding you that you’re running on a frozen snapshot:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(mtcars, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">booktabs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">longtable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  kableExtra<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb11-1">TeX Live 2020 is frozen and will no longer</span>
<span id="cb11-2">be routinely updated. This happens in preparation for a new release.</span>
<span id="cb11-3"></span>
<span id="cb11-4">If you're willing to help with pretesting the new release, and we hope</span>
<span id="cb11-5">you are, (when pretests are available), please read</span>
<span id="cb11-6">https://tug.org/texlive/pretest.html.</span>
<span id="cb11-7"></span>
<span id="cb11-8">Otherwise, just wait, and the new release will be ready in due time.</span>
<span id="cb11-9">TeX Live 2020 is frozen and will no longer</span>
<span id="cb11-10">be routinely updated. This happens in preparation for a new release.</span>
<span id="cb11-11"></span>
<span id="cb11-12">If you're willing to help with pretesting the new release, and we hope</span>
<span id="cb11-13">you are, (when pretests are available), please read</span>
<span id="cb11-14">https://tug.org/texlive/pretest.html.</span>
<span id="cb11-15"></span>
<span id="cb11-16">Otherwise, just wait, and the new release will be ready in due time.</span>
<span id="cb11-17">tlmgr: package repository https://ftp.tu-chemnitz.de/pub/tug/historic/systems/texlive/2020/tlnet-final (not verified: gpg unavailable)</span>
<span id="cb11-18">[1/1, ??:??/??:??] install: multirow [3k]</span>
<span id="cb11-19">running mktexlsr ...</span>
<span id="cb11-20">done running mktexlsr.</span>
<span id="cb11-21">tlmgr: package log updated: /Users/kirill/Library/TinyTeX/texmf-var/web2c/tlmgr.log</span>
<span id="cb11-22">TeX Live 2020 is frozen and will no longer</span>
<span id="cb11-23">be routinely updated. This happens in preparation for a new release.</span>
<span id="cb11-24">...</span></code></pre></div>
<p>The document is now rendered without errors.</p>
<p>The tinytex maintainers <a href="https://github.com/yihui/tinytex-releases/issues/19">have confirmed</a> that old bundles remain available for download. Of course the correct solution is to avoid weakly maintained dependencies in your code, and to replace them by better solutions. In reality, this is not always feasible, and breakages may occur without notice.</p>
<p>Happy freezing!</p>
</section>
<section id="details" class="level2">
<h2 class="anchored" data-anchor-id="details">Details</h2>
<p>On the <a href="https://tug.org/texlive/">TeXlive homepage</a>, the <a href="https://tug.org/texlive/acquire.html">“How to acquire TeX Live: other methods”</a> link has a section “Past releases”. The <code>tlmgr</code> command is shown right there. The <a href="https://tug.org/historic/">“Historic archive”</a> page contains a list of historic mirrors, use a mirror close to you.</p>
<p>I originally started my search at the “Historic archive” page. It took some time to find the correct command, it is also documented in the <a href="https://www.tug.org/texlive/doc/tlmgr.html#option"><code>tlmgr</code> manual</a>.</p>
<p>The tinytex package provides the <code>tlmgr_repo()</code> function as a shortcut to set the repository, but it seems to fail currently for this use case. Thanks Christophe Dervieux and Florian Kohrt for the hints!</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2021-10-07-old-texlive/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2021-10-07-old-texlive/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Seasonal Adjustment of Multiple Series</title>
  <dc:creator>Christoph Sax</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2021-03-09-seasonal-1.8/index.html</link>
  <description><![CDATA[ 



<p>seasonal is an easy-to-use and full-featured R-interface to X-13ARIMA-SEATS, the seasonal adjustment software developed by the United States Census Bureau. The latest CRAN version of seasonal makes it much easier to adjust multiple time series.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2021-03-09-seasonal-1.8/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Meriç Dağlı
</figcaption>
</figure>
<p><br></p>
<p><a href="http://www.seasonal.website">seasonal</a> depends on the <a href="https://CRAN.R-project.org/package=x13binary">x13binary</a> package to access pre-built binaries of X-13ARIMA-SEATS on all platforms and does not require any manual installation. To install both packages:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seasonal"</span>)</span></code></pre></div>
<p><code>seas</code> is the core function of the <a href="https://cran.r-project.org/package=seasonal">seasonal</a> package. By default, <code>seas</code> calls the automatic procedures of X-13ARIMA-SEATS to perform a seasonal adjustment that works well in most circumstances:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(AirPassengers)</span></code></pre></div>
<p>For a more detailed introduction, read our <a href="https://doi.org/10.18637/jss.v087.i11">article in the <em>Journal of Statistical Software</em></a>.</p>
<section id="multiple-series-adjusmtent" class="level3">
<h3 class="anchored" data-anchor-id="multiple-series-adjusmtent">Multiple Series Adjusmtent</h3>
<p>In the latest <a href="https://cran.r-project.org/package=seasonal">CRAN version 1.8</a>, it is now possible to seasonally adjust multiple series in a single call to <code>seas()</code>. This is done by using the built-in batch mode of X-13. It removes the need for loops or <code>lapply()</code> in such cases and finally brings one missing feature of X-13 to seasonal – the <em>composite</em> spec.</p>
<p>Multiple adjustments can be performed by supplying multiple time series as an <code>"mts"</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(seasonal)</span>
<span id="cb3-2">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(fdeaths, mdeaths), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x11 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">final</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          fdeaths  mdeaths
Jan 1974 614.1235 1598.740
Feb 1974 542.3500 1492.127
Mar 1974 613.5029 1443.238
Apr 1974 591.5725 1694.643
May 1974 607.4970 1696.021
Jun 1974 543.8415 1558.886
Jul 1974 597.0745 1663.176
Aug 1974 587.0533 1623.498
Sep 1974 588.2693 1741.394
Oct 1974 735.6666 1735.516
Nov 1974 602.0218 1665.590
Dec 1974 496.3985 1394.097
Jan 1975 564.0055 1560.605
Feb 1975 591.0320 1708.763
Mar 1975 585.7739 1652.994
Apr 1975 581.5294 1671.265
May 1975 537.8055 1588.605
Jun 1975 584.3284 1600.979
Jul 1975 566.4872 1541.099
Aug 1975 617.1197 1623.445
Sep 1975 516.4781 1521.497
Oct 1975 559.0481 1577.200
Nov 1975 561.6315 1602.659
Dec 1975 580.9778 1569.692
Jan 1976 519.8106 1477.855
Feb 1976 882.3725 2180.616
Mar 1976 674.5057 1744.114
Apr 1976 467.4502 1366.628
May 1976 509.7854 1344.809
Jun 1976 553.5233 1434.662
Jul 1976 503.2795 1447.952
Aug 1976 494.2373 1383.932
Sep 1976 529.1840 1453.496
Oct 1976 570.4128 1435.912
Nov 1976 590.4285 1540.551
Dec 1976 587.0971 1572.631
Jan 1977 583.2427 1607.153
Feb 1977 498.9514 1287.403
Mar 1977 500.4632 1306.324
Apr 1977 569.2076 1685.581
May 1977 565.6470 1405.231
Jun 1977 509.3196 1432.968
Jul 1977 548.4062 1414.216
Aug 1977 523.6985 1444.945
Sep 1977 563.3014 1402.720
Oct 1977 495.6653 1427.458
Nov 1977 453.9859 1307.828
Dec 1977 502.3045 1268.618
Jan 1978 535.2658 1415.724
Feb 1978 633.7605 1790.002
Mar 1978 559.2936 1469.883
Apr 1978 485.5062 1343.715
May 1978 590.4080 1509.166
Jun 1978 574.4467 1464.288
Jul 1978 571.2263 1428.398
Aug 1978 542.3579 1424.622
Sep 1978 551.2099 1422.428
Oct 1978 557.6905 1399.404
Nov 1978 479.8979 1199.762
Dec 1978 550.4253 1397.023
Jan 1979 548.9834 1557.853
Feb 1979 576.9922 1425.717
Mar 1979 549.3468 1393.788
Apr 1979 546.4590 1449.784
May 1979 525.9881 1359.843
Jun 1979 550.2481 1330.113
Jul 1979 533.7558 1373.156
Aug 1979 566.6884 1381.653
Sep 1979 552.6500 1377.175
Oct 1979 533.9571 1337.640
Nov 1979 557.9707 1414.101
Dec 1979 475.5049 1038.506</code></pre>
</div>
</div>
<p>This will perform two seasonal adjustments, one for <code>fdeaths</code> and one for <code>mdeaths</code>. X-13 spec-argument combinations can be applied in the usual way, such as <code>x11 = ""</code>. Note that if entered that way, they will apply to both series. The <a href="https://cran.r-project.org/web/packages/seasonal/vignettes/multiple.html">vignette on multiple adjustments</a> describes how to specify options for individual series.</p>
</section>
<section id="backend" class="level3">
<h3 class="anchored" data-anchor-id="backend">Backend</h3>
<p>X-13 ships with a batch mode that allows multiple adjustments in a single call to X-13. This is now the default in seasonal (<code>multimode = "x13"</code>). Alternatively, X-13 can be called for each series (<code>multimode = "R"</code>). The results should be usually the same, but switching to <code>multimode = "R"</code> may be useful for debugging:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(fdeaths, mdeaths), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multimode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x13"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fdeaths

Call:
seas(x = cbind(fdeaths, mdeaths), multimode = "x13")

Coefficients:
      Constant      AO1976.Feb  MA-Seasonal-12  
      -0.01578         0.43345         0.63119  


$mdeaths

Call:
seas(x = cbind(fdeaths, mdeaths), multimode = "x13")

Coefficients:
       AO1976.Feb         LS1976.Apr         AO1977.Apr         AO1978.Feb  
           0.3319            -0.1330             0.1957             0.2305  
       AO1979.Dec  MA-Nonseasonal-01     MA-Seasonal-12  
          -0.3149            -0.3854             0.6120  


$call
seas(x = cbind(fdeaths, mdeaths), multimode = "x13")

attr(,"class")
[1] "seas_multi" "list"      </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(fdeaths, mdeaths), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multimode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$fdeaths

Call:
seas(x = cbind(fdeaths, mdeaths), multimode = "R")

Coefficients:
      Constant      AO1976.Feb  MA-Seasonal-12  
      -0.01578         0.43345         0.63119  


$mdeaths

Call:
seas(x = cbind(fdeaths, mdeaths), multimode = "R")

Coefficients:
       AO1976.Feb         LS1976.Apr         AO1977.Apr         AO1978.Feb  
           0.3319            -0.1330             0.1957             0.2305  
       AO1979.Dec  MA-Nonseasonal-01     MA-Seasonal-12  
          -0.3149            -0.3854             0.6120  


$call
seas(x = cbind(fdeaths, mdeaths), multimode = "R")

attr(,"class")
[1] "seas_multi" "list"      </code></pre>
</div>
</div>
<p>In general, <code>multimode = "x13"</code> is faster. The following comparison on a MacBook Pro shows a modest speed gain, but bigger differences have been observed on other systems:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">many <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(fdeaths), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(many, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multimode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x13"</span>))</span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   user  system elapsed</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  9.415   0.653  10.079</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(many, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multimode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>))</span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   user  system elapsed</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 11.130   1.039  12.324</span></span></code></pre></div>
</section>
<section id="composite-spec" class="level3">
<h3 class="anchored" data-anchor-id="composite-spec">composite spec</h3>
<p>Support for the X-13 batch mode makes it finally possible to use the <em>composite</em> spec – the one feature of X-13 that was missing in seasonal. Sometimes, one has to decide whether seasonal adjustment should be performed on a granular level or on an aggregated level. The <em>composite</em> spec helps you to analyze the problem and to compare the direct and the indirect adjustments.</p>
<p>The <code>composite</code> argument is a list with an X-13 specification that is applied on the aggregated series. Specification works identically for other series in <code>seas()</code>, including the application of the defaults. If you provide an empty list, the usual defaults of <code>seas()</code> are used. A minimal composite call looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(</span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(mdeaths, fdeaths),</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">composite =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">series.comptype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"add"</span></span>
<span id="cb10-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$mdeaths

Call:
seas(x = cbind(mdeaths, fdeaths), composite = list(), series.comptype = "add")

Coefficients:
       AO1976.Feb         LS1976.Apr         AO1977.Apr         AO1978.Feb  
           0.3319            -0.1330             0.1957             0.2305  
       AO1979.Dec  MA-Nonseasonal-01     MA-Seasonal-12  
          -0.3149            -0.3854             0.6120  


$fdeaths

Call:
seas(x = cbind(mdeaths, fdeaths), composite = list(), series.comptype = "add")

Coefficients:
      Constant      AO1976.Feb  MA-Seasonal-12  
      -0.01578         0.43345         0.63119  


$composite

Call:
seas(x = cbind(mdeaths, fdeaths), composite = list(), series.comptype = "add")

Coefficients:
         Constant         AO1976.Feb  MA-Nonseasonal-01     MA-Seasonal-12  
         -0.03133            0.31247           -0.43509            0.99937  


$call
seas(x = cbind(mdeaths, fdeaths), composite = list(), series.comptype = "add")

attr(,"class")
[1] "seas_multi" "list"      </code></pre>
</div>
</div>
<p>You can verify that the composite refers to the total of <code>mdeaths</code> and <code>fdeaths</code> by running:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(ldeaths)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
seas(x = ldeaths)

Coefficients:
         Constant         AO1976.Feb  MA-Nonseasonal-01     MA-Seasonal-12  
         -0.03133            0.31247           -0.43509            0.99937  </code></pre>
</div>
</div>
<p>where <code>ldeaths</code> is the sum of <code>mdeaths</code> and <code>fdeaths</code>.</p>
</section>
<section id="acknowledgement" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgement">Acknowledgement</h3>
<p>Many thanks to <a href="https://mtec.ethz.ch/people/person-detail.MTU3MzEx.TGlzdC8yODk2LC0yMDgyMjgwMDQ4.html">Severin Thöni</a> and <a href="https://kof.ethz.ch/das-institut/personen/person-detail.MTYxMjA1.TGlzdC81NzgsODQ4OTAwOTg=.html">Matthias Bannert</a>, for demonstrating the benefits of the X-13 batch mode. Also to the <a href="https://kof.ethz.ch">ETH KOF</a>, for partially funding this development.</p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2021-03-09-seasonal-1.8/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2021-03-09-seasonal-1.8/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up a load-balanced Jitsi Meet instance</title>
  <dc:creator>Patrick Schratz</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2020-11-02-jitsi-load-balanced/index.html</link>
  <description><![CDATA[ 



<p>Jitsi Meet is a self-hosted Free and Open-Source Software (FOSS) video conferencing solution. During the recent COVID-19 pandemic, the project became quite popular, and many companies decided to host their own Jitsi instance.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2020-11-02-jitsi-load-balanced/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Chuttersnap
</figcaption>
</figure>
<p>There are many <a href="https://jitsi.github.io/handbook/docs/devops-guide">different ways</a> to install and run <a href="https://github.com/jitsi/jitsi-meet">Jitsi</a> on a machine. A popular choice in the DevOps space is to use <a href="https://github.com/jitsi/docker-jitsi-meet">Docker</a> via <code>docker-compose</code>, which was the method used in our scenario.</p>
<p>At cynkra, while we have been running our own Jitsi instance quite happily for some months, there was a slightly challenging task coming up: hosting a virtual meeting for approximately 100 participants.</p>
<section id="the-challenge" class="level2">
<h2 class="anchored" data-anchor-id="the-challenge">The Challenge</h2>
<p>cynkra actively supports the local <a href="https://www.meetup.com/Zurich-R-User-Group/">Zurich R User Group</a>. For one of their <a href="https://www.meetup.com/Zurich-R-User-Group/events/273910283/">recent meetings</a>, about 100 people RSVP’ed.</p>
<p>When browsing the load capabilities of a single Jitsi instance, we found that the stock setup begins to experience some challenges at around 35 people and fails at around 70 people. The limiting factor appears to be the “videobridge”. One solution is to add a second videobridge to the Jitsi instance. Jitsi can then distribute the load and should be able to host more than 100 people in a meeting.</p>
<p>The best approach is to deploy the second videobridge on a new instance to avoid running into CPU limitations on the main machine. While there is a <a href="https://github.com/jitsi/jitsi-meet/wiki/jitsi-meet-load-balancing-installation-Ubuntu-18.04-with-MUC-and-JID">guide</a> in the Jitsi Wiki and a <a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-videotutorials#how-to-load-balance-jitsi-meethttpsjitsiorgblogtutorial-video-how-to-load-balance-jitsi-meet">video</a> that explains how to do it, many people still struggle (<a href="https://github.com/jitsi/docker-jitsi-meet/issues/372">1</a>, <a href="https://community.jitsi.org/t/how-can-i-add-extra-jvb-in-docker-meet/30911/36">2</a>) to get this set up successfully.</p>
<p>Hence, we thought it would be valuable to take another, hopefully simple and understandable stab at explaining this task to the community.</p>
</section>
<section id="load-balancing-jitsi-meet" class="level2">
<h2 class="anchored" data-anchor-id="load-balancing-jitsi-meet">Load-balancing Jitsi Meet</h2>
<p>In the following, we will denote the main machine on which Jitsi runs, as MAIN. The second machine, which will only host a standalone videobridge, will be named BRIDGE.</p>
<ol type="1">
<li><p>The first step is to create a working installation on MAIN, following the <a href="https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-docker">official docker guide</a> from the Jitsi developers. There is no need to use Docker. An installation on the host system will also work.</p>
<p>At this point, we assume that you already have installed Jitsi with SSL support at a fictitious domain.</p></li>
<li><p>To be able to connect to the XMPP server (managed by <code>prosody</code>) on MAIN from BRIDGE (details in point 4 below), port 5222 needs to be exported to the public. This requires adding</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ports:</span></span>
<span id="cb1-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5222:5222"</span></span></code></pre></div>
<p>to the <code>prosody</code> section in <code>docker-compose.yml</code> and ensuring that the port is opened in the firewall (<code>ufw allow 5222</code>).</p></li>
<li><p>On BRIDGE, start with the same <code>.env</code> and <code>docker-compose.yml</code> as MAIN.</p>
<p>In <code>docker-compose.yml</code>, remove all services besides <code>jvb</code>. The videobridge will later connect to all services on MAIN.</p>
<p>Make sure that <code>JVB_AUTH_USER</code> and <code>JVB_AUTH_PASSWORD</code> in <code>.env</code> are the same as on MAIN, otherwise the authentication will fail.</p></li>
<li><p>On BRIDGE in <code>.env</code> change <code>XMPP_SERVER=xmpp.&lt;DOMAIN&gt;</code> to <code>XMPP_SERVER=&lt;DOMAIN&gt;</code>.</p></li>
<li><p>Run <code>docker-compose up</code> and observe what happens. The videobridge should successfully connect to <code>&lt;DOMAIN&gt;</code>. On MAIN, in <code>docker logs jitsi_jicofo_1</code>, an entry should appear denoting that a new videobridge was successfully connected.</p>
<p>It looks like</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Jicofo</span> 2020-10-23 19:01:52.173 INFO: <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">29</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> org.jitsi.jicofo.bridge.BridgeSelector.log<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Added</span> new videobridge: Bridge[jid=jvbbrewery@internal-muc.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>DOMAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/d789de303e9b, relayId=null, region=null, stress=0.00]</span></code></pre></div>
<p>If you have another videobridge running on MAIN, you should see that the identifier of the new videobridge (here <code>d789de303e9b</code>) is different to your main videobridge identifier. On BRIDGE, the logs should show something like</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">INFO:</span> Joined MUC: jvbbrewery@internal-muc.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>DOMAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">INFO:</span> Performed a successful health check in PT0S. Sticky failure: false</span></code></pre></div></li>
</ol>
<p>To test that the external videobridge is active, one can disable the main videobridge (<code>docker stop jitsi_jvb_1</code>) and try to enable the camera in a new meeting.</p>
</section>
<section id="troubleshooting-and-tips" class="level2">
<h2 class="anchored" data-anchor-id="troubleshooting-and-tips">Troubleshooting and Tips</h2>
<ul>
<li><p>If you see something like <code>SASLError using SCRAM-SHA-1: not-authorized</code>, this indicates that the <code>JVB_AUTH_PASSWORD</code> and/or <code>JVB_AUTH_USER</code> on BRIDGE are incorrect.</p></li>
<li><p>If you change something in <code>.env</code> of MAIN, you need to delete all config folders before running <code>docker-compose up</code> again. Otherwise changes won’t be picked up even when force destroying the containers.</p></li>
<li><p>Do not run <code>gen-passwords.sh</code> multiple times as <code>JVB_AUTH_PASSWORD</code> and BRIDGE will not be able to connect anymore.</p></li>
<li><p>Unrelated to the content above: if you want to create a user manually for your instance, the following command might be helpful:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> exec jitsi_prosody_1 prosodyctl <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--config</span> /config/prosody.cfg.lua register <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>USER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>DOMAIN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;PASSWORD&gt;"</span></span></code></pre></div></li>
</ul>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2020-11-02-jitsi-load-balanced/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
</item>
<item>
  <title>Time series of the world, unite!</title>
  <dc:creator>Christoph Sax</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2018-05-15-tsbox/index.html</link>
  <description><![CDATA[ 



<p>The R ecosystem knows a ridiculous number of time series classes. So, I decided to create a new universal standard that finally covers everyone’s use case…</p>
<p><a href="https://xkcd.com/927">Ok, just kidding!</a></p>
<p><a href="https://www.tsbox.help/">tsbox</a>, just realeased on <a href="https://cran.r-project.org/package=tsbox">CRAN</a>, provides a set of tools that are agnostic towards existing time series classes. It is built around a set of converters, which convert time series stored as <a href="https://www.rdocumentation.org/packages/stats/versions/3.5.0/topics/ts">ts</a>, <a href="https://cran.r-project.org/package=xts">xts</a>, <a href="https://rdrr.io/r/base/data.frame.html">data.frame</a>, <a href="https://cran.r-project.org/package=data.table">data.table</a>, <a href="http://tibble.tidyverse.org/">tibble</a>, <a href="https://cran.r-project.org/package=zoo">zoo</a>, <a href="https://tsibble.tidyverts.org/">tsibble</a> or <a href="https://cran.r-project.org/package=timeSeries">timeSeries</a> to each other.</p>
<p>To install the stable version from CRAN:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tsbox"</span>)</span></code></pre></div>
<p>To get an idea how easy it is to switch from one class to another, consider this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tsbox)</span>
<span id="cb2-2">x.ts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_c</span>(mdeaths, fdeaths)</span>
<span id="cb2-3">x.xts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_xts</span>(x.ts)</span>
<span id="cb2-4">x.df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_df</span>(x.xts)</span>
<span id="cb2-5">x.tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_tbl</span>(x.df)</span>
<span id="cb2-6">x.dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_tbl</span>(x.tbl)</span>
<span id="cb2-7">x.zoo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_zoo</span>(x.dt)</span>
<span id="cb2-8">x.tsibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_tsibble</span>(x.zoo)</span>
<span id="cb2-9">x.timeSeries <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_timeSeries</span>(x.tsibble)</span></code></pre></div>
<p>We jump form good old <code>ts</code> objects to<code>xts</code>, store our time series in various data frames and convert them to some highly specialized time series formats.</p>
<section id="tsbox-is-class-agnostic" class="level3">
<h3 class="anchored" data-anchor-id="tsbox-is-class-agnostic">tsbox is class-agnostic</h3>
<p>Because these converters work nicely, we can use them to make functions class-agnostic. If a class-agnostic function works for one class, it works for all:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_scale</span>(x.ts)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_scale</span>(x.xts)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_scale</span>(x.df)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_scale</span>(x.dt)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_scale</span>(x.tbl)</span></code></pre></div>
<p><code>ts_scale</code> normalizes one or multiple series, by subtracting the mean and dividing by the standard deviation. It works like a ‘generic’ function: You can apply it on any time series object, and it will return an object of the same class as its input.</p>
<p>So, whether we want to smooth, scale, differentiate, chain-link, forecast, regularize, or seasonally adjust a series, we can use the same commands to whatever time series at hand. tsbox offers a comprehensive toolkit for the basics of time series manipulation. Here are some additional operations:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_pc</span>(x.ts)                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># percentage change rates</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_forecast</span>(x.xts)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forecast, by exponential smoothing</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_seas</span>(x.df)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seasonal adjustment, by X-13</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_frequency</span>(x.dt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert to annual frequency</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_span</span>(x.tbl, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-1 year"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># limit time span to final year</span></span></code></pre></div>
</section>
<section id="tsbox-is-frequency-agnostic" class="level3">
<h3 class="anchored" data-anchor-id="tsbox-is-frequency-agnostic">tsbox is frequency-agnostic</h3>
<p>There are many more. Because they all start with <code>ts_</code>, you can use auto-complete to see what’s around. Most conveniently, there is a time series plot function that works for all classes and frequencies:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_plot</span>(</span>
<span id="cb5-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Airline Passengers</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> AirPassengers,</span>
<span id="cb5-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lynx trappings</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_df</span>(lynx),</span>
<span id="cb5-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Deaths from Lung Diseases</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_xts</span>(fdeaths),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Airlines, trappings, and deaths"</span>,</span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monthly passengers, annual trappings, monthly deaths"</span></span>
<span id="cb5-7">)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cynkra.com/blog/blog/posts/2018-05-15-tsbox/unnamed-chunk-2-1.png" title="Illustration" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">www.dataseries.org</figcaption>
</figure>
</div>
<p>There is also a version that uses <a href="https://CRAN.R-project.org/package=ggplot2">ggplot2</a> and has the same syntax.</p>
</section>
<section id="time-series-in-data-frames" class="level3">
<h3 class="anchored" data-anchor-id="time-series-in-data-frames">Time series in data frames</h3>
<p>You may have wondered why we treated data frames as a time series class. The spread of <a href="https://CRAN.R-project.org/package=dplyr">dplyr</a> and <a href="https://CRAN.R-project.org/package=data.table">data.table</a> has given data frames a boost and made them one of the most popular data structures in R. So, storing time series in a data frame is an obvious consequence. And even if you don’t intend to keep time series in data frames, this is still the format in which you import and export your data. tsbox makes it easy to switch from data frames to time series and back.</p>
</section>
<section id="make-existing-functions-class-agnostic" class="level3">
<h3 class="anchored" data-anchor-id="make-existing-functions-class-agnostic">Make existing functions class-agnostic</h3>
<p>tsbox includes <a href="https://www.tsbox.help/articles/ts-functions.html">tools</a> to make existing functions class-agnostic. To do so, the <code>ts_</code> function can be used to wrap any function that works with time series. For a function that works on <code>"ts"</code> objects, this is as simple as that:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">ts_rowsums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_</span>(rowSums)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_rowsums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_c</span>(mdeaths, fdeaths))</span></code></pre></div>
<p>Note that <code>ts_</code> returns a function, which can be used with or without a name.</p>
<p>In case you are wondering, tsbox uses <a href="https://CRAN.R-project.org/package=data.table">data.table</a> as a backend and makes use of its incredibly efficient reshaping facilities, its joins, and rolling joins. And thanks to <a href="https://cran.r-project.org/package=anytime">anytime</a>, tsbox will be able to recognize almost any date format without manual intervention.</p>
<p>So, if you’ve been struggling with R’s time series class, we hope that you found this blog helpful.</p>
<p>Website: <a href="https://www.tsbox.help">www.tsbox.help</a></p>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2018-05-15-tsbox/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
</item>
<item>
  <title>gfortran support for R on macOS</title>
  <dc:creator>Patrick Schratz</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2021-03-16-gfortran-macos/index.html</link>
  <description><![CDATA[ 



<p>For a long time, <code>gfortran</code> support on macOS could be achieved by installing the homebrew cask <code>gfortran</code> via <code>brew cask install gfortran</code>.</p>
<p>As of 2021, both the <code>brew cask</code> command and the cask <code>gfortran</code> are deprecated. Users who have installed this cask already, will not notice since things will continue to work as normal. Only new users who want to install <code>gfortran</code> this way, will get the message that the cask is “not available”. The cask <a href="https://github.com/Homebrew/homebrew-cask/pull/96504">was removed in December 2020</a> and merged into the <code>gcc</code> formula (which can be installed via <code>brew install gcc</code>). Now, one could go to <a href="https://github.com/fxcoudert/gfortran-for-macOS/releases" class="uri">https://github.com/fxcoudert/gfortran-for-macOS/releases</a> and manually install the respective <code>.dmg</code> file. However, this is not a long-term approach, and usually, one would like to do this via <code>brew</code>, the most popular package manager for macOS.</p>
<p>Unfortunately, this change did not result in a smooth experience for R users who want to compile packages from source that require a functional <code>gfortran</code> compiler. This requirement does not occur very often, as most users install R package binaries on macOS. These do not require a working <code>gfortran</code> installation.</p>
<p>However, in some cases, when calling <code>install.packages()</code>, a working <code>gfortran</code> installation is needed. And if <code>type = "source"</code> is used, it needs to be there.</p>
<p>The issue after the integration of <code>gfortran</code> into the <code>gcc</code> formula is that the official R binary installer for macOS expects the <code>gfortran</code> installation at <code>/usr/local/gfortran</code>. This was fulfilled by the old <code>gfortran</code> cask but is not by the new <code>gcc</code> integration. Hence, trying to install the “cluster” package via <code>install.packages("cluster", type = "source")</code> will fail and <code>gfortran</code> will not be found:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> installing <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>source<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> package ‘cluster’ ...</span>
<span id="cb1-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> package ‘cluster’ successfully unpacked and MD5 sums checked</span>
<span id="cb1-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> using staged installation</span>
<span id="cb1-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> libs</span>
<span id="cb1-5">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c clara.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o clara.o</span>
<span id="cb1-6">gfortran <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>mmacosx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>min<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.13</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fno<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>optimize<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sibling<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>calls  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c daisy.f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o daisy.o</span>
<span id="cb1-7">make<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> gfortran<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> No such file or directory</span>
<span id="cb1-8">make<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">***</span> [<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Library<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Frameworks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R.framework<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Resources<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>etc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Makeconf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> daisy.o] Error <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">127</span></span>
<span id="cb1-9">ERROR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> compilation failed <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> package ‘cluster’</span></code></pre></div>
<p>There was a <a href="https://github.com/Homebrew/homebrew-cask/issues/96135">discussion</a> about these changes in the homebrew PR, but the comments that highlighted potential issues seem to have gone unnoticed. Also, some workarounds posted in the thread do not work.</p>
<section id="so-how-does-one-now-install-gfortran-on-macos-these-days" class="level2">
<h2 class="anchored" data-anchor-id="so-how-does-one-now-install-gfortran-on-macos-these-days">So how does one now install <code>gfortran</code> on macOS these days?</h2>
<p>It is likely that one will not need the workaround presented below in the future since it will probably be fixed in the R installer at some point (hopefully). In the meantime, the following helps:</p>
<ol type="1">
<li><p>Create a file <code>~/.R/Makevars</code> (if it does not exist yet)</p></li>
<li><p>Add the following to <code>~/.R/Makevars</code></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FC</span>      = usr/local/opt/gcc/bin/gfortran</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">F77</span>     = /usr/local/opt/gcc/bin/gfortran</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FLIBS</span>   = <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-L</span>/usr/local/opt/gcc/lib</span></code></pre></div></li>
<li><p>Restart R</p></li>
<li><p>Test the changes by calling <code>install.packages("cluster", type = "source")</code></p></li>
</ol>
<p>The output should look like this</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> installing <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>source<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> package ‘cluster’ ...</span>
<span id="cb3-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> package ‘cluster’ successfully unpacked and MD5 sums checked</span>
<span id="cb3-3"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> using staged installation</span>
<span id="cb3-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> libs</span>
<span id="cb3-5">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c clara.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o clara.o</span>
<span id="cb3-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gcc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gfortran <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fno<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>optimize<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sibling<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>calls  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c daisy.f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o daisy.o</span>
<span id="cb3-7"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gcc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bin<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gfortran <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fno<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>optimize<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sibling<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>calls  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c dysta.f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o dysta.o</span>
<span id="cb3-8">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c fanny.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o fanny.o</span>
<span id="cb3-9">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c init.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o init.o</span>
<span id="cb3-10">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c mona.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o mona.o</span>
<span id="cb3-11">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c pam.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o pam.o</span>
<span id="cb3-12">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c sildist.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o sildist.o</span>
<span id="cb3-13">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c spannel.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o spannel.o</span>
<span id="cb3-14">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Library/Frameworks/R.framework/Resources/include"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DNDEBUG   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>I<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>include   <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>fPIC  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wall <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>O2  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c twins.c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o twins.o</span>
<span id="cb3-15">clang <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dynamiclib <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wl,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>headerpad_max_install_names <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>undefined dynamic_lookup <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>single_module <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>multiply_defined suppress <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Library<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Frameworks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R.framework<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Resources<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lib <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lib <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o cluster.so clara.o daisy.o dysta.o fanny.o init.o mona.o pam.o sildist.o spannel.o twins.o <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>L<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>local<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>opt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>gcc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lib <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>F<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Library<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Frameworks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R.framework<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>.. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>framework R <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wl,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>framework <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Wl,CoreFoundation</span>
<span id="cb3-16">ld<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> warning<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> object <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span> (daisy.o) was built <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> newer macOS <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.2</span>) than being <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linked</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.0</span>)</span>
<span id="cb3-17">ld<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> warning<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> object <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span> (dysta.o) was built <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> newer macOS <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.2</span>) than being <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">linked</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.0</span>)</span>
<span id="cb3-18">installing to <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>pjs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Library<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>R<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>library<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>00LOCK<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cluster<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>00new<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cluster<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>libs</span>
<span id="cb3-19"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> R</span>
<span id="cb3-20"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> data</span>
<span id="cb3-21"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> moving datasets to lazyload DB</span>
<span id="cb3-22"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> inst</span>
<span id="cb3-23"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> byte<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compile and prepare package <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> lazy loading</span>
<span id="cb3-24"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> help</span>
<span id="cb3-25"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> installing help indices</span>
<span id="cb3-26"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> building package indices</span>
<span id="cb3-27"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> testing <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> installed package can be loaded from temporary location</span>
<span id="cb3-28"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> checking absolute paths <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shared objects and dynamic libraries</span>
<span id="cb3-29"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> testing <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> installed package can be loaded from final location</span>
<span id="cb3-30"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> testing <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> installed package keeps a record of temporary installation path</span>
<span id="cb3-31"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DONE</span> (cluster)</span></code></pre></div>
<p><strong>Caution</strong>: After using this approach for a few days, I have seen issues with certain packages (e.g.&nbsp;<code>hsdar</code>). It is unclear if the issues trace back to the packages or the new way of using <code>gfortran</code>. You might want to re-think using this proposed approach and eventually manually install the linked standalone <code>gfortran</code> binary shown earlier in this post.</p>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<ul>
<li>I am not sure about the <code>ld: warning: object file (dysta.o) was built for newer macOS version (11.2) than being linked (11.0)</code> warning, but it does not seem to have a practical impact.</li>
<li>This approach was tested with R 4.0.4, macOS 11.2.3 in March 2021.</li>
<li>If you still have the old <code>gfortran</code> cask installed, you may want to switch to the new approach as the cask is no longer being updated. Hence, you will run a very outdated <code>gfortran</code> at some point without noticing. You can remove the old cask with <code>brew remove – cask gfortran</code>.</li>
</ul>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2021-03-16-gfortran-macos/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
</item>
<item>
  <title>seasonal 1.9: Accessing composite output</title>
  <dc:creator>Christoph Sax</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2022-04-19-seasonal-1.9/index.html</link>
  <description><![CDATA[ 



<p>seasonal is an easy-to-use and full-featured R interface to X-13ARIMA-SEATS, the seasonal adjustment software developed by the United States Census Bureau. The latest CRAN version of seasonal fixes several bugs and makes it easier to access output from multiple objects. See <a href="https://github.com/christophsax/seasonal/blob/main/NEWS.md#190">here</a> for a complete list of changes.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2022-04-19-seasonal-1.9/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Aaron Burden
</figcaption>
</figure>
<p><br></p>
<p><code>seas()</code> is the core function of the <a href="https://cran.r-project.org/package=seasonal">seasonal</a> package. By default, <code>seas()</code> calls the automatic procedures of X-13ARIMA-SEATS to perform a seasonal adjustment that works well in most circumstances:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(seasonal)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(AirPassengers)</span></code></pre></div>
<p>For a more detailed introduction, read our <a href="https://doi.org/10.18637/jss.v087.i11">article in the <em>Journal of Statistical Software</em></a>.</p>
<section id="multiple-series-adjustment" class="level3">
<h3 class="anchored" data-anchor-id="multiple-series-adjustment">Multiple series adjustment</h3>
<p>The previous version has introduced <a href="https://www.cynkra.com/blog/2021-03-09-seasonal-1.8/">the adjustment of multiple series</a> in a single call to <code>seas()</code>. This has removed the need for loops or <code>lapply()</code> in such cases and finally brought the <em>composite</em> spec to seasonal.</p>
<p>As <a href="https://github.com/christophsax/seasonal/issues/278">Brian Monsell</a> pointed out, this was not enough to access the output from the composite spec. The latest <a href="https://cran.r-project.org/package=seasonal">CRAN version</a> fixes this problem.</p>
<p>Multiple adjustments can be performed by supplying multiple time series as an <code>"mts"</code> object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(seasonal)</span>
<span id="cb2-2">m0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(fdeaths, mdeaths), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x11 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">final</span>(m0)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          fdeaths  mdeaths
Jan 1974 614.1235 1598.740
Feb 1974 542.3500 1492.127
Mar 1974 613.5029 1443.238
Apr 1974 591.5725 1694.643
May 1974 607.4970 1696.021
Jun 1974 543.8415 1558.886
Jul 1974 597.0745 1663.176
Aug 1974 587.0533 1623.498
Sep 1974 588.2693 1741.394
Oct 1974 735.6666 1735.516
Nov 1974 602.0218 1665.590
Dec 1974 496.3985 1394.097
Jan 1975 564.0055 1560.605
Feb 1975 591.0320 1708.763
Mar 1975 585.7739 1652.994
Apr 1975 581.5294 1671.265
May 1975 537.8055 1588.605
Jun 1975 584.3284 1600.979
Jul 1975 566.4872 1541.099
Aug 1975 617.1197 1623.445
Sep 1975 516.4781 1521.497
Oct 1975 559.0481 1577.200
Nov 1975 561.6315 1602.659
Dec 1975 580.9778 1569.692
Jan 1976 519.8106 1477.855
Feb 1976 882.3725 2180.616
Mar 1976 674.5057 1744.114
Apr 1976 467.4502 1366.628
May 1976 509.7854 1344.809
Jun 1976 553.5233 1434.662
Jul 1976 503.2795 1447.952
Aug 1976 494.2373 1383.932
Sep 1976 529.1840 1453.496
Oct 1976 570.4128 1435.912
Nov 1976 590.4285 1540.551
Dec 1976 587.0971 1572.631
Jan 1977 583.2427 1607.153
Feb 1977 498.9514 1287.403
Mar 1977 500.4632 1306.324
Apr 1977 569.2076 1685.581
May 1977 565.6470 1405.231
Jun 1977 509.3196 1432.968
Jul 1977 548.4062 1414.216
Aug 1977 523.6985 1444.945
Sep 1977 563.3014 1402.720
Oct 1977 495.6653 1427.458
Nov 1977 453.9859 1307.828
Dec 1977 502.3045 1268.618
Jan 1978 535.2658 1415.724
Feb 1978 633.7605 1790.002
Mar 1978 559.2936 1469.883
Apr 1978 485.5062 1343.715
May 1978 590.4080 1509.166
Jun 1978 574.4467 1464.288
Jul 1978 571.2263 1428.398
Aug 1978 542.3579 1424.622
Sep 1978 551.2099 1422.428
Oct 1978 557.6905 1399.404
Nov 1978 479.8979 1199.762
Dec 1978 550.4253 1397.023
Jan 1979 548.9834 1557.853
Feb 1979 576.9922 1425.717
Mar 1979 549.3468 1393.788
Apr 1979 546.4590 1449.784
May 1979 525.9881 1359.843
Jun 1979 550.2481 1330.113
Jul 1979 533.7558 1373.156
Aug 1979 566.6884 1381.653
Sep 1979 552.6500 1377.175
Oct 1979 533.9571 1337.640
Nov 1979 557.9707 1414.101
Dec 1979 475.5049 1038.506</code></pre>
</div>
</div>
<p>This performs two seasonal adjustments, one for <code>fdeaths</code> and one for <code>mdeaths</code>. The <a href="https://cran.r-project.org/web/packages/seasonal/vignettes/multiple.html">vignette on multiple adjustments</a> describes how to specify options for individual series.</p>
</section>
<section id="accessing-composite-output" class="level3">
<h3 class="anchored" data-anchor-id="accessing-composite-output">Accessing composite output</h3>
<p>The <code>composite</code> argument is a list with an X-13 specification applied to the aggregated series:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seas</span>(</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(mdeaths, fdeaths),</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">composite =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">series.comptype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"add"</span></span>
<span id="cb4-5">)</span></code></pre></div>
</div>
<p>With version 1.9 can now use <code>out()</code> to access the output of the composite spec:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">out</span>(m1)</span></code></pre></div>
<p>We can also use <code>series()</code>, e.g., to access the final, indirectly adjusted series via the <code>composite</code> spec (see <code>?series</code> for all available series):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">series</span>(m1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"composite.indseasadj"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Jan      Feb      Mar      Apr      May      Jun      Jul      Aug
1974 2172.614 2053.613 2057.679 2284.821 2260.974 2105.191 2240.895 2185.517
1975 2098.251 2298.581 2213.878 2256.802 2111.628 2181.738 2098.883 2219.083
1976 1969.128 3078.359 2373.028 1846.802 1851.167 1983.231 1943.369 1872.025
1977 2132.860 1807.832 1795.898 2262.793 1957.817 1940.262 1949.784 1953.665
1978 1908.154 2431.050 2007.252 1830.715 2077.654 2033.120 1987.875 1956.487
1979 2061.627 1997.557 1925.365 1984.834 1885.778 1882.208 1903.203 1937.474
          Sep      Oct      Nov      Dec
1974 2296.345 2395.347 2291.835 2013.749
1975 2024.988 2100.543 2181.495 2234.826
1976 1967.742 1973.567 2151.597 2199.389
1977 1946.642 1894.848 1807.119 1808.051
1978 1959.824 1928.748 1724.336 1966.847
1979 1925.618 1846.713 1991.679 1517.027</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2022-04-19-seasonal-1.9/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2022-04-19-seasonal-1.9/banner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>tempdisagg: converting quarterly time series to daily</title>
  <dc:creator>Christoph Sax</dc:creator>
  <link>https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/index.html</link>
  <description><![CDATA[ 



<p>Not having a time series at the desired frequency is a common problem for researchers and analysts. For example, instead of quarterly sales, they only have annual sales. Instead of a daily stock market index, they only have a weekly index. While there is no way to fully make up for the missing data, there are useful workarounds: with the help of one or more high-frequency indicator series, the low-frequency series may be disaggregated into a high-frequency series.</p>
<figure class="figure">
<img alt="Illustration" src="https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/banner.jpg" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Photo by Jordan McDonald
</figcaption>
</figure>
<p><br></p>
<p>The package tempdisagg implements the standard methods for temporal disaggregation: Denton, Denton-Cholette, Chow-Lin, Fernandez and Litterman. Our article on <a href="https://doi.org/10.32614/RJ-2013-028">temporal disaggregation of time series</a> in the R-Journal describes the package and the theory of temporal disaggregation in more detail.</p>
<p>The package has been around for eight years, enabling the standard year or quarter to month or quarter disaggregation. With version 1.0, there are now some major new features: disaggregation can be performed from any frequency to any frequency. Also, tempdisagg now supports time series classes other than <code>ts</code>.</p>
<section id="convert-between-any-frequency" class="level3">
<h3 class="anchored" data-anchor-id="convert-between-any-frequency">Convert between any frequency</h3>
<p>tempdisagg can now convert between most frequencies, for example, it can disaggregate a monthly series to daily. It is no longer restricted to regular conversions, where each low-frequency period had the same number of high-frequency periods. Instead, a low-frequency period (e.g.&nbsp;month) can contain any number of high-frequency periods (e.g.&nbsp;31, 28 or 29 days). Thanks to Roger Kissling and Stella Sim who have suggested this idea.</p>
<p>We can not only convert months to days, but also years to days, weeks to seconds, or academic years to seconds, or lunar years to hours,etc. The downside is that the computation time depends on the number of observations. Thus, for longer high-frequency series, the computation may take a while.</p>
<p>In the following, we try to disaggregate quarterly GDP of Switzerland to a hypothetical daily GDP series. The example series are shipped with the package.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tempdisagg)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(tempdisagg)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(gdp.q)</span>
<span id="cb1-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##         time    value</span></span>
<span id="cb1-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1 2005-01-01 133101.3</span></span>
<span id="cb1-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2 2005-04-01 136320.4</span></span>
<span id="cb1-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3 2005-07-01 137693.7</span></span>
<span id="cb1-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4 2005-10-01 139475.9</span></span>
<span id="cb1-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5 2006-01-01 139204.7</span></span>
<span id="cb1-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6 2006-04-01 141112.5</span></span></code></pre></div>
</section>
<section id="time-series-can-be-stored-in-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="time-series-can-be-stored-in-data-frames">Time series can be stored in data frames</h2>
<p>Because we are dealing with daily data, we keep the data in a <code>data.frame</code>, rather than in a <code>ts</code> object. Other time series objects, such as <code>xts</code> and <code>tsibble</code>, are possible as well. For conversion and visualization, we use the <a href="https://www.tsbox.help">tsbox</a> package.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tsbox)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_plot</span>(gdp.q, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swiss GDP"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"real, not seasonally adjusted"</span>)</span></code></pre></div>
<figure class="figure">
<img alt="Graph: Swiss GDP, not seasonally adjusted" src="https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/quarterly-1.png" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Series to disaggregate: quarterly gross domestic product of Switzerland
</figcaption>
</figure>
<p><br></p>
</section>
<section id="disaggregation-to-daily-frequency" class="level2">
<h2 class="anchored" data-anchor-id="disaggregation-to-daily-frequency">Disaggregation to daily frequency</h2>
<p>While disaggregation can also be performed without other series, we use Swiss stock market data as an indicator series to disaggregate GDP. Data of the stock market index, the SMI, is also included in tempdisagg. Weekend and holiday values have been interpolated, because <code>td</code> does not allow the presence of missing values.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_plot</span>(spi.d, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Swiss Performance Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daily values, interpolated"</span>)</span></code></pre></div>
<figure class="figure">
<img alt="Graph: Swiss Performance Index, daily" src="https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/indicator-1.png" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Daily indicator series: Swiss Performance Index
</figcaption>
</figure>
<p><br></p>
<p>The following uses the Chow-Lin method to disaggregate the series. A high <em>rho</em> parameter takes into account that the two series are unlikely to be co-integrated.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">m.d.stocks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">td</span>(gdp.q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> spi.d, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chow-lin-fixed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed.rho =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(m.d.stocks)</span>
<span id="cb4-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb4-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Call:</span></span>
<span id="cb4-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## td(formula = gdp.q ~ spi.d, method = "chow-lin-fixed", fixed.rho = 0.9)</span></span>
<span id="cb4-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb4-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Residuals:</span></span>
<span id="cb4-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    Min     1Q Median     3Q    Max</span></span>
<span id="cb4-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## -10656  -1760   1076   3796   8891</span></span>
<span id="cb4-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Coefficients:</span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##              Estimate Std. Error t value Pr(&gt;|t|)</span></span>
<span id="cb4-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## (Intercept) 1.320e+03  2.856e+01   46.22   &lt;2e-16 ***</span></span>
<span id="cb4-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## spi.d       5.512e-02  3.735e-03   14.76   &lt;2e-16 ***</span></span>
<span id="cb4-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ---</span></span>
<span id="cb4-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</span></span>
<span id="cb4-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb4-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 'chow-lin-fixed' disaggregation with 'sum' conversion</span></span>
<span id="cb4-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 59 low-freq. obs. converted to 5493 high-freq. obs.</span></span>
<span id="cb4-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Adjusted R-squared: 0.7928 AR1-Parameter:   0.9</span></span></code></pre></div>
<p>And here is the result: A daily series of GDP</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">gdp.d.stocks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(m.d.stocks)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_plot</span>(</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_scale</span>(</span>
<span id="cb5-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_c</span>(gdp.d.stocks, gdp.q)</span>
<span id="cb5-5">  ),</span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Daily disaggregated GDP"</span>,</span>
<span id="cb5-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one indicator"</span></span>
<span id="cb5-8">)</span></code></pre></div>
<figure class="figure">
<img alt="Graph: Daily disaggregated Swiss GDP" src="https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/daily-1.png" style=" width: 100%; height: auto" class="figure-img">
<figcaption class="figure-caption">
Swiss GDP, disaggregated to daily
</figcaption>
</figure>
<p><br></p>
<p>Like with all disaggregation methods in tempdisagg, the resulting series fulfills the aggregation constraint (the resulting series is as long as the indicator, and needs to be shortened for a comparison):</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_span</span>(</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_frequency</span>(gdp.d.stocks, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"quarter"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aggregate =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>),</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-07-01"</span></span>
<span id="cb6-5">  ),</span>
<span id="cb6-6">  gdp.q</span>
<span id="cb6-7">)</span>
<span id="cb6-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span></code></pre></div>


</section>

 ]]></description>
  <guid>https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/index.html</guid>
  <pubDate>Mon, 21 Aug 2023 13:09:43 GMT</pubDate>
  <media:content url="https://cynkra.com/blog/blog/posts/2020-02-09-tempdisagg/banner.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
